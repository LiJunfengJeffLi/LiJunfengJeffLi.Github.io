<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeff&#39;s Blog</title>
  
  <subtitle>李俊锋的个人独立博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://prophetjeff.com/"/>
  <updated>2017-11-23T08:47:55.067Z</updated>
  <id>http://prophetjeff.com/</id>
  
  <author>
    <name>Jeff Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql学习笔记（九）——插入、更新和删除数据</title>
    <link href="http://prophetjeff.com/2017/11/23/mysql-9/"/>
    <id>http://prophetjeff.com/2017/11/23/mysql-9/</id>
    <published>2017-11-23T08:47:38.000Z</published>
    <updated>2017-11-23T08:47:55.067Z</updated>
    
    <content type="html"><![CDATA[<p>　　SQL除最常用的<code>select</code>语句(检索)外，还有三个经常使用SQL语句：<code>insert</code>（插入）、<code>update</code>（更新）和<code>delete</code>（删除）。它们的作用是操纵数据库表数据，而与<code>select</code>语句不同的是这些语句在使用时有一定的危险性，通常都需要对它们进行一定的限制，以保证数据的安全。<br><a id="more"></a></p><h2 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1. 插入数据"></a>1. 插入数据</h2><p>　　顾名思义，<code>insert</code>是用来插入行到数据库表的。插入可以用以下几种方式使用：</p><ul><li>插入完整的行；</li><li>插入行的一部分；</li><li>插入多行；</li><li>插入某些查询的结果。</li></ul><p>从数据安全方面考虑，可针对每个表或每个用户，利用Mysql的安全机制（后续介绍）禁止使用<code>insert</code>语句。</p><h3 id="1-1-插入完整的行"><a href="#1-1-插入完整的行" class="headerlink" title="1.1 插入完整的行"></a>1.1 插入完整的行</h3><p>　　把数据插入表中的最简单方法是使用基本的INSERT语法，它要求指定表名和被插入到新行中的值。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,                                #输入</div><div class="line">cust_address,</div><div class="line">cust_city,</div><div class="line">cust_state,</div><div class="line">cust_zip,</div><div class="line">cust_country,</div><div class="line">cust_contact,</div><div class="line">cust_email)</div><div class="line"><span class="keyword">values</span>(<span class="string">'Pep E. LawPew'</span>,</div><div class="line"><span class="string">'100 Main Street'</span>,</div><div class="line"><span class="string">'Los Angeles'</span>,</div><div class="line"><span class="string">'CA'</span>,</div><div class="line"><span class="string">'90046'</span>,</div><div class="line"><span class="string">'USA'</span></div><div class="line"><span class="literal">NULL</span>,</div><div class="line"><span class="literal">NULL</span>);</div></pre></td></tr></table></figure><p>注意，此例插入一个新客户到customers表，存储到每个表列中的数据在<code>values</code>子句中给出。每个列必须提供一个值，如果某个列没有值，必须使用NULL值（在对应列允许使用空值的条件下）。在插入行时，Mysql将用<code>values</code>列表中相应的值填入列表中的对应项（不一定是实际表列的顺序但要按照<code>values</code>前指定的顺序）。其次，由于cust_id列由于在创建表时指定为自动增量，因此不必给出它对应的新值（这是Mysql的工作）。<code>insert</code>语句一般不会产生输出。</p><p>　　如果表的定义允许，则可以在<code>insert</code>操作中省略某些列（如该例中的cust_id）。省略的列必须满足以下某个条件。</p><ul><li>该列定义为允许NULL值（空值）；</li><li>在表定义中给出默认值。这表示如果不给出值，将使用默认值（自动增量也属于该类）。</li></ul><p>若在不满足上述两种条件的情况下，使用<code>values</code>语句时省略该列，则Mysql将产生一条错误信息，并且相应的行插入不成功。</p><h3 id="1-2-插入多个行"><a href="#1-2-插入多个行" class="headerlink" title="1.2 插入多个行"></a>1.2 插入多个行</h3><p>　　当然可以使用多条<code>insert</code>语句，但如果每条<code>insert</code>语句中的列名和次序相同，可以如下组合语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,                                #输入</div><div class="line">cust_address,</div><div class="line">cust_city,</div><div class="line">cust_state,</div><div class="line">cust_zip,</div><div class="line">cust_country,</div><div class="line">)</div><div class="line"><span class="keyword">values</span>(</div><div class="line">       <span class="string">'Pep E. LawPew'</span>,</div><div class="line">       <span class="string">'100 Main Street'</span>,</div><div class="line">       <span class="string">'Los Angeles'</span>,</div><div class="line">       <span class="string">'CA'</span>,</div><div class="line">       <span class="string">'90046'</span>,</div><div class="line">       <span class="string">'USA'</span></div><div class="line">       ),</div><div class="line">      (</div><div class="line">       <span class="string">'M. Martian'</span>,</div><div class="line">       <span class="string">'42 Galaxy Way'</span>,</div><div class="line">       <span class="string">'New York'</span>,</div><div class="line">       <span class="string">'NY'</span>,</div><div class="line">       <span class="string">'11213'</span>,</div><div class="line">       <span class="string">'USA'</span></div><div class="line">       );</div><div class="line">``` </div><div class="line"></div><div class="line">其中单条<span class="keyword">INSERT</span>语句有多组值，每组值用一对圆括号括起来并用逗号分隔。此语句可以提高数据库处理的性能，因为Mysql用单条<span class="string">`insert`</span>语句处理多个插入要比使用多条<span class="string">`insert`</span>语句快。</div><div class="line"></div><div class="line">### <span class="number">1.3</span> 插入检索出的数据</div><div class="line"></div><div class="line">　　<span class="keyword">INSERT</span>一般用来给表插入一个指定列值的行。但是，<span class="keyword">INSERT</span>还是存在另一种形式，可以利用它将一条<span class="string">`select`</span>语句的结果插入表中。这就是<span class="keyword">INSERT</span> <span class="keyword">SELECT</span>，顾名思义，它是由一条<span class="string">`insert`</span>语句和一条<span class="string">`select`</span>语句组成的。假如现在想从custnew表中合并客户到你的customers表，可以按如下操作进行：</div><div class="line"></div><div class="line"><span class="string">``</span><span class="string">`sql</span></div><div class="line"><span class="string">insert into customers(cust_id,                                #输入</span></div><div class="line"><span class="string">cust_name,</span></div><div class="line"><span class="string">cust_address,</span></div><div class="line"><span class="string">cust_city,</span></div><div class="line"><span class="string">cust_state,</span></div><div class="line"><span class="string">cust_zip,</span></div><div class="line"><span class="string">cust_country,</span></div><div class="line"><span class="string">cust_contact,</span></div><div class="line"><span class="string">cust_email)</span></div><div class="line"><span class="string">select cust_id,</span></div><div class="line"><span class="string">cust_name,</span></div><div class="line"><span class="string">cust_address,</span></div><div class="line"><span class="string">cust_city,</span></div><div class="line"><span class="string">cust_state,</span></div><div class="line"><span class="string">cust_zip,</span></div><div class="line"><span class="string">cust_country,</span></div><div class="line"><span class="string">cust_contact,</span></div><div class="line"><span class="string">cust_email</span></div><div class="line"><span class="string">from custnew;</span></div></pre></td></tr></table></figure><p>此例中，<code>select</code>语句从custnew中检索出要插入的值，而不是列出它们。<code>select</code>列出的每个列对应于customers表名后所跟列表中的每个列。这条语句依赖于custnew表中有多少行，如果这个表为空，则没有行被插入（不会产生错误，因为操作依然是合法的）。注意，这个例子中导入了cust_id（假设你能确保cust_id的值不会重复，如果主键值重复，<code>insert</code>操作会失败）。当然也可以简单省略这列，这样Mysql会根据自动增量生产新值。</p><p>　　注意，该语句并不要求列名匹配（虽然在此例中使用了相同的列名），事实上Mysql并不关心<code>select</code>返回的列名，它使用的是列的位置（即<code>select</code>的第n列用来填充<code>insert</code>指定列表中的第n列）。其次,INSERT SELECT中的<code>select</code>语句也可以使用<code>where</code>子句过滤要插入的数据。</p><h2 id="2-更新和删除数据"><a href="#2-更新和删除数据" class="headerlink" title="2. 更新和删除数据"></a>2. 更新和删除数据</h2><h3 id="2-1-更新数据"><a href="#2-1-更新数据" class="headerlink" title="2.1 更新数据"></a>2.1 更新数据</h3><p>　　要更新（修改）表中的数据，可使用<code>update</code>语句。可采用两种方式使用该语句：更新表中特定的行；更新表中所有的行。<code>update</code>语句由三部分组成，分别是：要更新的表、列名和它们的新值、确定要更新行的过滤条件。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> customers                                                #输入</div><div class="line"><span class="keyword">set</span> cust_name = <span class="string">'The Fudds'</span>,</div><div class="line">    cust_email = <span class="string">'elmer@fudd.com'</span></div><div class="line"><span class="keyword">where</span> cust_id = <span class="number">10005</span>;</div></pre></td></tr></table></figure><p>该例更新了客户10005的客户名和电子邮件地址。<code>update</code>语句总是以要更新的表的名字开始，此例中要更新的表的名字为custmoers。<code>set</code>命令用来将新值赋给被更新的列（如该例，更新多个列只需使用单个<code>set</code>命令，用逗号分隔），<code>update</code>语句以<code>where</code>子句结束，它告诉Mysql更新哪一行（应该总是给出<code>where</code>子句，否则Mysql将用此新值更新所有行）。注意，<code>update</code>语句可以使用子查询。为了删除某行中一列的值，可设置它为NULL。</p><p>　　如果使用<code>update</code>语句更新多行，并且在更新这些行中的某行时发生错误，则整个操作将被取消，错误发生前更新的所有行业恢复到原来的值。如果想在发生错误时保持继续更新，可以使用<code>ignore</code>关键字，如<code>update ignore customers...</code>。</p><h3 id="2-2-删除数据"><a href="#2-2-删除数据" class="headerlink" title="2.2 删除数据"></a>2.2 删除数据</h3><p>　　要删除一个表中的数据，可以使用<code>delete</code>语句。可以用两种方式使用该语句：从表中删除特定的行；从表中删除所有的行。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> customers                                           #输入</div><div class="line"><span class="keyword">where</span> cust_id = <span class="number">10006</span>;</div></pre></td></tr></table></figure><p>上述语句中，<code>delete from</code>要求指定从中删除数据的表名，<code>where</code>子句过滤要删除的行（如果省略<code>where</code>子句将删除表中所有的行）。注意，<code>delete</code>语句不需要列名和通配符，它删除整行而不是整列，要删除整列需要使用<code>update</code>语句。其次,注意<code>delete</code>语句的作用是删除表中的数据而不是删除表本身。</p><ul><li>如果想删除表中的所有行，<code>truncate table</code>语句也可以完成相同的工作，且它比<code>delete</code>语句速度更快（因为它通过删除原来的表并重建一个表来完成，不需要逐行删除表中数据）。</li></ul><p>　　注意，在对更新和删除语句使用<code>where</code>子句之前，可以先用<code>select</code>语句进行测试以确保过滤的记录正确。使用强制实施引用完成性（它通过在表定义时指定主键和外键来实现，后续学习中会涉及到）的数据库，这样Mysql将不允许删除具有与其他表相关联的数据的行。其次，Mysql中没有撤销按钮，应该非常小心使用<code>update</code>和<code>delete</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　SQL除最常用的&lt;code&gt;select&lt;/code&gt;语句(检索)外，还有三个经常使用SQL语句：&lt;code&gt;insert&lt;/code&gt;（插入）、&lt;code&gt;update&lt;/code&gt;（更新）和&lt;code&gt;delete&lt;/code&gt;（删除）。它们的作用是操纵数据库表数据，而与&lt;code&gt;select&lt;/code&gt;语句不同的是这些语句在使用时有一定的危险性，通常都需要对它们进行一定的限制，以保证数据的安全。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记（八）——联结表</title>
    <link href="http://prophetjeff.com/2017/11/22/mysql-8/"/>
    <id>http://prophetjeff.com/2017/11/22/mysql-8/</id>
    <published>2017-11-22T08:09:01.000Z</published>
    <updated>2017-11-22T08:09:17.976Z</updated>
    
    <content type="html"><![CDATA[<p>　　SQL最强大的功能之一就是能在数据检索查询的执行中联结（join）表，联结是利用SQL的SELECT能执行的最重要的操作。通过前面的章节我们知道，分解数据为多个表能更有效地存储及处理数据，且具有更大的可伸缩性（能够适应不断增加的工作量而不失败）。与此对应的代价是常规的单条SELECT语句难以同时对多个表进行检索。而使用联结可以解决这一问题。</p><p>　　联结是一种机制，用来在一条SELECT语句中关联表。使用特殊的语法，可以联结多个表并返回一组输出。要注意的是，联结并不是实体（即它在实际的数据库表中并不存在），它由Mysql根据需要建立（存在于查询的执行中）。<br><a id="more"></a></p><h3 id="什么是关系表？"><a href="#什么是关系表？" class="headerlink" title="什么是关系表？"></a>什么是关系表？</h3><p>　　在能够有效的使用联结之前，必须了解关系表以及关系数据库设计的一些基础知识。首先来思考一个例子，假如有一个包含产品目录的数据库表，其中每个类别产品各占一行。对于每种产品，要存储的信息包括产品描述、价格和该产品的供应商信息（供应商名、地址、联系电话等）。那么如何合理存储这些信息呢？要注意，往往一个供应商会生产多种产品。我们当然可以将它们存储在一张表中，但这样会带来一些问题：对于同一个供应商生产的产品后接的供应商信息相同，而重复信息耗费空间又耗时；如果供应商信息改变，需要进行多处改动。</p><p>　　因此，将数据进行有效分解并存储是很有必要的，这也是关系数据库设计基础。一类数据一个表，而各个表通过某些常用值（关系(relational)）互相关联。在本例中，可以建立两个表，一个存储产品信息（products表），一个存储供应商信息（vendors表）。vendors表以供应商ID作为主键，而products表除供应商ID之外不存储其他供应商信息。vendors表的主键又叫做products表的外键（供应商ID），它将两表关联，利用供应商ID可以从vendors表中检索出供应商相关信息。</p><ul><li><strong>外键</strong>（foreign key）：外键是某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</li></ul><p>这样做的好处是：供应商信息不重复；如果供应商信息变动，只需更新vendors表中的单个记录，而相关表中的数据不用改动。总之，关系数据可以有效存储和方便处理，它的可伸缩性远比非关系数据库要好。</p><h2 id="1-创建联结"><a href="#1-创建联结" class="headerlink" title="1. 创建联结"></a>1. 创建联结</h2><p>　　首先来看下面这个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> vend_name, prod_name, prod_price                             #输入</div><div class="line"><span class="keyword">from</span> vendors, products</div><div class="line"><span class="keyword">where</span> vendors.vend_id = products.vend_id</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name, prod_name;</div><div class="line">+<span class="comment">-------------+----------------+------------+                       #输出</span></div><div class="line">| vend_name   | prod_name      | prod_price |</div><div class="line">+<span class="comment">-------------+----------------+------------+</span></div><div class="line">| ACME        | Bird seed      |      10.00 |</div><div class="line">| ACME        | Carrots        |       2.50 |</div><div class="line">| ACME        | Detonator      |      13.00 |</div><div class="line">| ACME        | Safe           |      50.00 |</div><div class="line">| ACME        | Sling          |       4.49 |</div><div class="line">| ACME        | TNT (1 stick)  |       2.50 |</div><div class="line">| ACME        | TNT (5 sticks) |      10.00 |</div><div class="line">| Anvils R Us | .5 ton anvil   |       5.99 |</div><div class="line">| Anvils R Us | 1 ton anvil    |       9.99 |</div><div class="line">| Anvils R Us | 2 ton anvil    |      14.99 |</div><div class="line">| Jet <span class="keyword">Set</span>     | JetPack <span class="number">1000</span>   |      <span class="number">35.00</span> |</div><div class="line">| Jet <span class="keyword">Set</span>     | JetPack <span class="number">2000</span>   |      <span class="number">55.00</span> |</div><div class="line">| LT Supplies | Fuses          |       <span class="number">3.42</span> |</div><div class="line">| LT Supplies | Oil can        |       <span class="number">8.99</span> |</div><div class="line">+<span class="comment">-------------+----------------+------------+</span></div><div class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</div></pre></td></tr></table></figure><p>上述语句中，<code>select</code>指定了三个列，与以前不同的是它们分别存储在两张表中，而<code>from</code>关键字后也接相应的两张表。<code>where</code>子句则给出了两张表的正确联结，它指示Mysql匹配vendors表中vend_id和products表中的vend_id（通过完全限定列名的方式）。</p><p>　　注意，各位看官或许会对利用<code>where</code>子句建立联结关系感到疑惑。实际上，要知道在一条<code>select</code>语句中联结几个表时，相应的关系是在运行中构造的（在数据库表的定义中不存在能指示Mysql对表进行联结的东西），即必须由我们自己完成。联结表时，实际上是将两个表的相关列进行配对（满足联结条件），类似过滤条件结果只输出满足匹配条件的行。如果不给出<code>where</code>子句，第一个表中每行将与第二个表的每行进行配对，而不管它们逻辑上是否可以配在一起（将返回一个笛卡尔积）。因此，应该保证所有的联结都有<code>where</code>子句及其正确性。</p><h3 id="1-1-内部联结"><a href="#1-1-内部联结" class="headerlink" title="1.1 内部联结"></a>1.1 内部联结</h3><p>　　前述所用联结称为等值联结（equijion），它基于两个表之间的相等测试。这种联结也称为内部联结，它也可以使用稍微不同的语法来明确指定联结的类型。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> vend_name, prod_name, prod_price                          #输入</div><div class="line"><span class="keyword">from</span> vendors <span class="keyword">inner</span> <span class="keyword">join</span> products</div><div class="line"><span class="keyword">on</span> vendors.vend_id = products.vend_id;</div></pre></td></tr></table></figure><p>此语句与前一例语句的输出完全一致，有所不同的是该语句中<code>from</code>子句的内容略有不同。这里，两个表之间的关系是<code>from</code>子句的组成部分，并以<code>inner join</code>指定。且在使用这种语法时，联结条件用特定的<code>on</code>子句而不是<code>where</code>子句给出，传递给ON的实际条件与传递给WHERE的相同（SQL规范首选INNER JOIN语法）。</p><h3 id="1-2-联结多个表"><a href="#1-2-联结多个表" class="headerlink" title="1.2 联结多个表"></a>1.2 联结多个表</h3><p>　　SQL对一条<code>select</code>语句中可以联结的表的数目没有限制。创建联结的基本规则也相同，首先列出所有表，然后定义表之间的关系。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name, vend_name, prod_price, quantity                    #输入</div><div class="line"><span class="keyword">from</span> orderitems, products, vendors</div><div class="line"><span class="keyword">where</span> products.vend_id = vendors.vend_id</div><div class="line"><span class="keyword">and</span> orderitems.prod_id = products.prod_id</div><div class="line"><span class="keyword">and</span> order_num = <span class="number">20005</span>;</div><div class="line">+<span class="comment">----------------+-------------+------------+----------+             #输出</span></div><div class="line">| prod_name      | vend_name   | prod_price | quantity |</div><div class="line">+<span class="comment">----------------+-------------+------------+----------+</span></div><div class="line">| .5 ton anvil   | Anvils R Us |       5.99 |       10 |</div><div class="line">| 1 ton anvil    | Anvils R Us |       9.99 |        3 |</div><div class="line">| TNT (5 sticks) | ACME        |      10.00 |        5 |</div><div class="line">| Bird seed      | ACME        |      10.00 |        1 |</div><div class="line">+<span class="comment">----------------+-------------+------------+----------+</span></div><div class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.05</span> sec)</div></pre></td></tr></table></figure><p>此例子显示编号为20005的订单中的产品。订单物品存储在orderitems表中。每个产品按其产品ID存储，它引用products表中的产品，这些产品通过供应商ID联结到vendors表中相应的供应商，供应商ID存储在每个产品的记录中。这里<code>from</code>子句列出了3个表，而<code>where</code>子句定义了这两个联结条件，而第三个联结条件用来过滤出订单20005中的物品。</p><h2 id="2-创建高级联结"><a href="#2-创建高级联结" class="headerlink" title="2. 创建高级联结"></a>2. 创建高级联结</h2><p>　　除了前面使用的简单联结（内部联结或等值联结）外，还有其他高级联结：自联结、自然联结、外部联结。</p><h3 id="如何使用表别名？"><a href="#如何使用表别名？" class="headerlink" title="如何使用表别名？"></a>如何使用表别名？</h3><p>　　之前我们学过如何使用别名引用被检索的表列，实际上，别名除了用于列名和计算字段外，SQL还允许给表起别名。这样做的好处首先是可以简化SQL语句，其次允许在<code>select</code>语句中多次使用相同的表（见自联结部分）。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name, vend_name, prod_price, quantity                    #输入</div><div class="line"><span class="keyword">from</span> orderitems <span class="keyword">as</span> o, products <span class="keyword">as</span> p, vendors <span class="keyword">as</span> v</div><div class="line"><span class="keyword">where</span> p.vend_id = v.vend_id</div><div class="line"><span class="keyword">and</span> o.prod_id = p.prod_id</div><div class="line"><span class="keyword">and</span> order_num = <span class="number">20005</span>;</div></pre></td></tr></table></figure><p>该例完全复制了前一个例子的语句，只是通过使用表别名对其进行了简化。注意该例中，表别名只用于<code>where</code>子句，事实上，它还可以用于<code>select</code>的列表、<code>order by</code>子句等等。表别名只在查询中使用，与列别名不同，它不返回到客户机。</p><h3 id="2-1-自联结"><a href="#2-1-自联结" class="headerlink" title="2.1 自联结"></a>2.1 自联结</h3><p>　　首先来看一个例子，假如你发现某物品（ID为DTNTR）存在问题，此时你想知道生产该物品的供应商的其他产品是否也存在问题。要完成这个任务，第一种方法是首先找到生产该物品的供应商，然后再检索出这个供应商生产的其他产品（使用子查询）。第二种方法是使用自联结，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> p1.prod_id, p1.prod_name                                      #输入</div><div class="line"><span class="keyword">from</span> products <span class="keyword">as</span> p1, products <span class="keyword">as</span> p2</div><div class="line"><span class="keyword">where</span> p1.vend_id = p2.vend_id</div><div class="line"><span class="keyword">and</span> p2.prod_id = <span class="string">'DTNTR'</span>;</div><div class="line">+<span class="comment">---------+----------------+                                         #输出</span></div><div class="line">| prod_id | prod_name      |</div><div class="line">+<span class="comment">---------+----------------+</span></div><div class="line">| DTNTR   | Detonator      |</div><div class="line">| FB      | Bird seed      |</div><div class="line">| FC      | Carrots        |</div><div class="line">| SAFE    | Safe           |</div><div class="line">| SLING   | Sling          |</div><div class="line">| TNT1    | TNT (1 stick)  |</div><div class="line">| TNT2    | TNT (5 sticks) |</div><div class="line">+<span class="comment">---------+----------------+</span></div><div class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</div></pre></td></tr></table></figure><p>此查询中需要的两个表是相同的表，因此在<code>from</code>子句后出现两次，这是合法的，但对products的引用具有二义性。使用表别名可以解决这一问题。</p><h3 id="2-2-自然联结"><a href="#2-2-自然联结" class="headerlink" title="2.2 自然联结"></a>2.2 自然联结</h3><p>　　无论何时对表进行联结，应该至少有一个列出现在不止一张表中（被联结的列）。简单的联结返回所有数据，甚至相同的列多次出现。而自然联结排除多次出现，使每个列只返回一次。这一般通过对表使用通配符，对其他表的列使用明确子集来完成。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> c.*, o.order_num, o.order_date,                               #输入</div><div class="line">       oi.prod_id, oi.quantity, oi.item_price</div><div class="line"><span class="keyword">from</span> customers <span class="keyword">as</span> c, orders <span class="keyword">as</span> o, orderitems <span class="keyword">as</span> oi</div><div class="line"><span class="keyword">where</span> c.cust_id = o.cust_id</div><div class="line"><span class="keyword">and</span> oi.order_num = o.order_num</div><div class="line"><span class="keyword">and</span> prod_id = <span class="string">'FB'</span>;</div></pre></td></tr></table></figure><p>事实上，我们之前所建立的每个内部联结都是自然联结。</p><h3 id="2-3-外部联结"><a href="#2-3-外部联结" class="headerlink" title="2.3 外部联结"></a>2.3 外部联结</h3><p>　　许多联结将一个表中的行与另一个表中的行相关联。但有的行时没有对应的关联行的，我们有时候也希望将这些行包含在我们的查询中。例如，列出所有产品及其订购数量，包括没有人订购的产品。这类工作也需要通过连接来完成，这种类型的联结称之为外部联结。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> customers.cust_id, orders.order_num                           #输入</div><div class="line"><span class="keyword">from</span> customers <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</div><div class="line"><span class="keyword">on</span> customers.cust_id = orders.cust_id;</div><div class="line">+<span class="comment">---------+-----------+                                              #输出</span></div><div class="line">| cust_id | order_num |</div><div class="line">+<span class="comment">---------+-----------+</span></div><div class="line">|   10001 |     20005 |</div><div class="line">|   10001 |     20009 |</div><div class="line">|   10002 |      NULL |</div><div class="line">|   10003 |     20006 |</div><div class="line">|   10004 |     20007 |</div><div class="line">|   10005 |     20008 |</div><div class="line">|   10006 |      NULL |</div><div class="line">|   10007 |      NULL |</div><div class="line">+<span class="comment">---------+-----------+</span></div><div class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</div></pre></td></tr></table></figure><p>上述语句使用了<code>outer join</code>来指定联结类型。与内部联结不同的是，外部联结还包括没有对应关联行的行，因此需要通过<code>left</code>或者<code>right</code>关键字指定需要包括其所有行的表（<code>right</code>指出右边的表，而<code>left</code>指出左边的表）。</p><h3 id="2-4-使用带聚集函数的联结"><a href="#2-4-使用带聚集函数的联结" class="headerlink" title="2.4 使用带聚集函数的联结"></a>2.4 使用带聚集函数的联结</h3><p>　　在学习聚集函数时，我们知道它可以用来汇总数据。但之前所有的例子都是从单个表汇总，事实上它们也可以与联结一起使用。比如，需要检索所有客户及每个客户所下订单数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> customers.cust_name, customers.cust_id,                       #输入</div><div class="line">       <span class="keyword">count</span>(orders.order_num) <span class="keyword">as</span> num_ord</div><div class="line"><span class="keyword">from</span> customers <span class="keyword">inner</span> <span class="keyword">join</span> orders</div><div class="line"><span class="keyword">on</span> customers.cust_id = orders.cust_id</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> customers.cust_id;</div><div class="line">+<span class="comment">----------------+---------+---------+                               #输出</span></div><div class="line">| cust_name      | cust_id | num_ord |</div><div class="line">+<span class="comment">----------------+---------+---------+</span></div><div class="line">| Coyote Inc.    |   10001 |       2 |</div><div class="line">| Wascals        |   10003 |       1 |</div><div class="line">| Yosemite Place |   10004 |       1 |</div><div class="line">| E Fudd         |   10005 |       1 |</div><div class="line">+<span class="comment">----------------+---------+---------+</span></div><div class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>此<code>select</code>语句使用<code>inner join</code>将customers和orders表互相联结。<code>group by</code>按客户分组数据。因此，函数调用<code>count(orders.order_num)</code>对每个订单计数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　SQL最强大的功能之一就是能在数据检索查询的执行中联结（join）表，联结是利用SQL的SELECT能执行的最重要的操作。通过前面的章节我们知道，分解数据为多个表能更有效地存储及处理数据，且具有更大的可伸缩性（能够适应不断增加的工作量而不失败）。与此对应的代价是常规的单条SELECT语句难以同时对多个表进行检索。而使用联结可以解决这一问题。&lt;/p&gt;
&lt;p&gt;　　联结是一种机制，用来在一条SELECT语句中关联表。使用特殊的语法，可以联结多个表并返回一组输出。要注意的是，联结并不是实体（即它在实际的数据库表中并不存在），它由Mysql根据需要建立（存在于查询的执行中）。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记（七）——子查询与组合查询</title>
    <link href="http://prophetjeff.com/2017/11/21/mysql-7/"/>
    <id>http://prophetjeff.com/2017/11/21/mysql-7/</id>
    <published>2017-11-21T07:06:09.000Z</published>
    <updated>2017-11-21T07:06:32.959Z</updated>
    
    <content type="html"><![CDATA[<p>　　查询（query）是任何SQL语句的统称，而此术语一般指SELECT语句。在此章节之前，我们所看到的所有<code>select</code>语句都是简单查询，即从单个数据库表中检索数据的单条语句。实际上，SQL还允许创建子查询（subquery），它是嵌套在其他查询中的查询。此外，Mysql也允许执行多个查询（多条<code>select</code>语句），并将结果作为单个查询结果返回。<br><a id="more"></a></p><h2 id="1-子查询"><a href="#1-子查询" class="headerlink" title="1.子查询"></a>1.子查询</h2><ul><li>子查询（subquery）:嵌套在其他查询中的查询。</li></ul><h3 id="1-1-利用子查询进行过滤"><a href="#1-1-利用子查询进行过滤" class="headerlink" title="1.1 利用子查询进行过滤"></a>1.1 利用子查询进行过滤</h3><p>　　假设某一商家将订单存储在两个表中。对于包含订单号、客户ID、订单日期的每个订单，orders表存储一行。各个订单的物品存储在相关的orderitems表中。而orders表不存储客户信息，它只存储在相关的customers表中。现在，商家需要列出订购物品TNT2的所有客户，应该怎么进行检索呢？可分为三个步骤：</p><ol><li>检索包含物品TNT2的所有订单编号；</li><li>检索具有前一步骤列出的订单编号的所有客户的ID；</li><li>检索前一步骤返回的所有客户ID的客户信息。</li></ol><p>上述每个步骤都可以单独作为一个查询来执行，即把一条<code>select</code>语句返回的结果用于另一条<code>select</code>语句的<code>where</code>子句。事实上，我们也可以通过使用子查询来讲3个查询组合成一条语句。如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> cust_name, cust_contact                                       #输入</div><div class="line"><span class="keyword">from</span> customers</div><div class="line"><span class="keyword">where</span> cust_id <span class="keyword">in</span> (<span class="keyword">select</span> cust_id</div><div class="line">                  <span class="keyword">from</span> orders</div><div class="line">                  <span class="keyword">where</span> order_num <span class="keyword">in</span> (<span class="keyword">select</span> order_num</div><div class="line">                                      <span class="keyword">from</span> orderitems</div><div class="line">                                      <span class="keyword">where</span> prod_id = <span class="string">'TNT2'</span>));</div><div class="line">+<span class="comment">----------------+--------------+                                    #输出</span></div><div class="line">| cust_name      | cust_contact |</div><div class="line">+<span class="comment">----------------+--------------+</span></div><div class="line">| Coyote Inc.    | Y Lee        |</div><div class="line">| Yosemite Place | Y Sam        |</div><div class="line">+<span class="comment">----------------+--------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.05</span> sec)</div></pre></td></tr></table></figure><p>注意，在<code>select</code>语句中，子查询总是从内向外处理。在处理上面的<code>select</code>语句时，Mysql实际上执行了三个操作，从最里层到最外层。包含子查询的<code>select</code>语句难以阅读和调试，如上述将语句分解为多行并加以适当的缩进可以极大程度上简化子查询的使用。其次，在<code>where</code>子句中使用子查询需要保证<code>select</code>语句与<code>where</code>子句中有相同数目的列（如此才能进行匹配）。事实上，子查询并不总是执行此类检索的最有效方法，在下一章节中我们会重现此例。</p><h3 id="1-2-作为计算字段使用子查询"><a href="#1-2-作为计算字段使用子查询" class="headerlink" title="1.2 作为计算字段使用子查询"></a>1.2 作为计算字段使用子查询</h3><p>　　使用子查询的另一方法是创建计算字段。假如现在需要显示customers表中每个客户的订单总数。订单与相应的客户ID存储在orders表中。为了完成这个任务，首先需要从customers表中检索客户列表；然后对于每个检索出的客户，统计其在orders表中的订单数目。语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> cust_name,                                                    #输入</div><div class="line">       cust_state,</div><div class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*)</div><div class="line">        <span class="keyword">from</span> orders</div><div class="line">        <span class="keyword">where</span> orders.cust_id = customers.cust_id) <span class="keyword">as</span> orders</div><div class="line"><span class="keyword">from</span> customers</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> cust_name;</div><div class="line">+<span class="comment">----------------+------------+--------+                             #输出</span></div><div class="line">| cust_name      | cust_state | orders |</div><div class="line">+<span class="comment">----------------+------------+--------+</span></div><div class="line">| Coyote Inc.    | MI         |      2 |</div><div class="line">| E Fudd         | IL         |      1 |</div><div class="line">| M. Martin      | NY         |      0 |</div><div class="line">| Mouse House    | OH         |      0 |</div><div class="line">| Pep E. LaPew   | CA         |      0 |</div><div class="line">| Wascals        | IN         |      1 |</div><div class="line">| Yosemite Place | AZ         |      1 |</div><div class="line">+<span class="comment">----------------+------------+--------+</span></div><div class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.85</span> sec)</div></pre></td></tr></table></figure><p>此语句返回三个字段，其中orders为一个计算字段，它是由圆括号中的子查询建立的。该子查询对每个客户执行一次，此例中子查询执行了7次。此例中使用了完全限定表名（在前面的章节提到过），它告诉SQL比较orders表中的cust_id和当前正从customers表中检索的cust_id。这种类型的子查询称为相关子查询（涉及外部查询的子查询），在列名有多义性时需要这种语法，表名和列名间用一个句点分隔。</p><h2 id="2-组合查询"><a href="#2-组合查询" class="headerlink" title="2. 组合查询"></a>2. 组合查询</h2><p>　　Mysql允许执行多个查询（多条<code>select</code>语句），并将结果作为单个查询结果返回，这些组合查询称为并（union）或符合查询（compound query）。在两种情况下需要使用组合查询：</p><ol><li>在单个查询中从不同的表返回类似结构的数据；</li><li>对单个表执行多个查询，按单个查询返回数据。</li></ol><h3 id="2-1-创建组合查询"><a href="#2-1-创建组合查询" class="headerlink" title="2.1 创建组合查询"></a>2.1 创建组合查询</h3><p> 　　可以使用<code>union</code>操作符来组合多条SQL语句，将它们的结果组合成单个结果集。首先来看下面这个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> vend_id, prod_id, prod_price                            #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_price &lt;= <span class="number">5</span></div><div class="line"><span class="keyword">union</span></div><div class="line"><span class="keyword">select</span> vend_id, prod_id, prod_price</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> vend_id <span class="keyword">in</span> (<span class="number">1001</span>,<span class="number">1002</span>);</div><div class="line">+<span class="comment">---------+---------+------------+                             #输出</span></div><div class="line">| vend_id | prod_id | prod_price |</div><div class="line">+<span class="comment">---------+---------+------------+</span></div><div class="line">|    1003 | FC      |       2.50 |</div><div class="line">|    1002 | FU1     |       3.42 |</div><div class="line">|    1003 | SLING   |       4.49 |</div><div class="line">|    1003 | TNT1    |       2.50 |</div><div class="line">|    1001 | ANV01   |       5.99 |</div><div class="line">|    1001 | ANV02   |       9.99 |</div><div class="line">|    1001 | ANV03   |      14.99 |</div><div class="line">|    1002 | OL1     |       8.99 |</div><div class="line">+<span class="comment">---------+---------+------------+</span></div><div class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.06</span> sec)</div></pre></td></tr></table></figure><p><code>union</code>关键字的使用很加单，只需在各条<code>select</code>语句之间加上。该例检索了价格小于等于5的所有物品的一个列表，且包括供应商1001和1002生产的所有物品。显然，使用多个<code>where</code>子句也能完成该工作，且在本例中使用<code>where</code>子句和<code>or</code>操作符会更加简单。但是对于复杂的过滤条件（比如从多个表检索数据），使用<code>union</code>可能会使处理更简单。</p><p>　　注意，<code>union</code>关键字使用时，多个查询必须包含相同的列、表达式或聚集函数（但可以不以相同的次序给出）。其次，列数据类型必须兼容，即类型不必完全相同，但必须是DBMS可以隐含地转换类型。</p><h3 id="2-2-包含或取消重复的行"><a href="#2-2-包含或取消重复的行" class="headerlink" title="2.2 包含或取消重复的行"></a>2.2 包含或取消重复的行</h3><p>　　在进行组合查询时，<code>union</code>关键字从查询结果集中自动去除了重复的行，与使用组合<code>where</code>子句的结果输出方式一致。这是UNION的默认行为，但在必要的情况下，可使用<code>union all</code>返回所有匹配行（这正好是使用组合<code>where</code>子句不能完成的工作）。</p><h3 id="2-3-对组合查询结果排序"><a href="#2-3-对组合查询结果排序" class="headerlink" title="2.3 对组合查询结果排序"></a>2.3 对组合查询结果排序</h3><p>　　如果需要对组合查询的结果进行排序，只能使用一条<code>order by</code>子句，且它必须接在最后一条<code>select</code>语句之后（虽然只在最后一条语句中后接，但它实际上排序整个检索结果）。事实上，对结果集不存在用一种方式排序一部分，又用另一种方式排序另一部分，因此用多条<code>order by</code>子句是不合理的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　查询（query）是任何SQL语句的统称，而此术语一般指SELECT语句。在此章节之前，我们所看到的所有&lt;code&gt;select&lt;/code&gt;语句都是简单查询，即从单个数据库表中检索数据的单条语句。实际上，SQL还允许创建子查询（subquery），它是嵌套在其他查询中的查询。此外，Mysql也允许执行多个查询（多条&lt;code&gt;select&lt;/code&gt;语句），并将结果作为单个查询结果返回。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记（六）——数据汇总与分组</title>
    <link href="http://prophetjeff.com/2017/11/20/mysql-6/"/>
    <id>http://prophetjeff.com/2017/11/20/mysql-6/</id>
    <published>2017-11-20T09:43:03.000Z</published>
    <updated>2017-11-20T09:43:34.279Z</updated>
    
    <content type="html"><![CDATA[<p>本章节介绍利用Mysql对数据进行分类汇总，即对各个指定组别数据进行汇总（包括求和，均值，极值等）。实现分组的的SQL语句为<code>select</code>语句的<code>group by</code>子句和<code>having</code>子句，而数据汇总是利用SQL的聚集函数。<br><a id="more"></a></p><h2 id="1-汇总数据"><a href="#1-汇总数据" class="headerlink" title="1. 汇总数据"></a>1. 汇总数据</h2><p>　　通常，我们并不希望直接将实际数据检索出来而是查看数据的汇总信息，为此Mysql提供了专门的函数。这些函数使Mysql查询可用于检索数据，以便分析和生成数据报表。这类检索分为以下几种类型：</p><ol><li>确定表中的行数（或者满足某个条件或包含某个特定值的函数）；</li><li>获得表中行组的和；</li><li>找出表列（或所有行或某些特定的行）的最大值、最小值和平均值等。</li></ol><p>以上三种类型检索都需要对表中数据汇总而不是检索表数据本身，因此在此种情况下返回原始数据时对资源的浪费。Mysql提供了5个聚集函数（运行在行组上，计算和返回单个值的函数）方便完成数据汇总任务：</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">AVG()</td><td style="text-align:center">返回某列的平均值</td></tr><tr><td style="text-align:center">COUNT()</td><td style="text-align:center">返回某列的行数</td></tr><tr><td style="text-align:center">MAX()</td><td style="text-align:center">返回某列的最大值</td></tr><tr><td style="text-align:center">MIN()</td><td style="text-align:center">返回某列的最小值</td></tr><tr><td style="text-align:center">SUM()</td><td style="text-align:center">返回某列值之和</td></tr><tr><td style="text-align:center">STD()/STDDEV_SAMP()</td><td style="text-align:center">返回某列的标准差/样本标准差</td></tr><tr><td style="text-align:center">VARIANCE()/VAR_SAMP()</td><td style="text-align:center">返回某列的方差/样本方差</td></tr></tbody></table><p>下面是几个使用聚集函数检索的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(prod_price) <span class="keyword">as</span> avg_price                          #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> vend_id = <span class="number">1003</span>;</div><div class="line">+<span class="comment">-----------+                                                #输出</span></div><div class="line">| avg_price |</div><div class="line">+<span class="comment">-----------+</span></div><div class="line">| 13.212857 |</div><div class="line">+<span class="comment">-----------+</span></div><div class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>上述语句返回供应商ID为1003的产品价格均值。要注意，AVG()函数只能用来确定特定数值列的平均值，即括号内只能包含一个参数（对应列名，也可以是计算字段，即使用算数操作符连接的多个列），多个列求均值需要给出多个AVG()函数。聚合函数总是忽略值为NULL的行，但<code>count()</code>函数的第二种使用方式<code>count(*)</code>可以对表中各列非空值行进行计数。</p><h3 id="如何只聚集不同的值？"><a href="#如何只聚集不同的值？" class="headerlink" title="如何只聚集不同的值？"></a>如何只聚集不同的值？</h3><p>　　有的时候，或许我们只希望对列中不同的值进行进行汇总。其实，在数据检索那一章节中，我们已经使用<code>distinct</code>关键字实现对列中不同的值进行数据检索，而Mysql在聚集函数中也提供了完全类似的功能，该功能在Mysql 5.0.3版本之后可以正常运行。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">distinct</span> prod_price) <span class="keyword">as</span> avg_price                 #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> vend_id = <span class="number">1003</span>;</div><div class="line">+<span class="comment">-----------+                                                #输出</span></div><div class="line">| avg_price |</div><div class="line">+<span class="comment">-----------+</span></div><div class="line">| 15.998000 |</div><div class="line">+<span class="comment">-----------+</span></div><div class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>注意，聚集函数中<code>distinct</code>关键字必须后接列名，不能用于计算或表达式。与之相对的是<code>all</code>关键字，它是默认情况下的参数，因此无需特别声明。</p><h3 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h3><p>　　上述涉及的例子都只适用单个聚集函数，实际上<code>select</code>语句可以根据需要包含多个聚集函数。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> num_items,                                 #输入</div><div class="line">       <span class="keyword">min</span>(prod_price) <span class="keyword">as</span> price_min,</div><div class="line">       <span class="keyword">max</span>(prod_price) <span class="keyword">as</span> price_max,</div><div class="line">       <span class="keyword">avg</span>(prod_price) <span class="keyword">as</span> price_avg</div><div class="line"><span class="keyword">from</span> products;</div><div class="line">+<span class="comment">-----------+-----------+-----------+-----------+             #输出</span></div><div class="line">| num_items | price_min | price_max | price_avg |</div><div class="line">+<span class="comment">-----------+-----------+-----------+-----------+</span></div><div class="line">|        14 |      2.50 |     55.00 | 16.133571 |</div><div class="line">+<span class="comment">-----------+-----------+-----------+-----------+</span></div><div class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><h2 id="2-分组数据"><a href="#2-分组数据" class="headerlink" title="2. 分组数据"></a>2. 分组数据</h2><p>　　目前为止，所有的计算都是在表的所有数据或匹配特定的<code>where</code>子句（数据过滤的方式）的数据上进行的。但如果现在我们需要返回每一个供应商的产品数目，那前述的方法就办不到了（当然可以遍历并分别检索，但供应商过多时工作量会非常大）。此时，分组的办法可以讲数据分为多个逻辑组，以便对每个组进行聚集计算。</p><h3 id="2-1-创建分组"><a href="#2-1-创建分组" class="headerlink" title="2.1 创建分组"></a>2.1 创建分组</h3><p>　　分组是在<code>select</code>语句中通过子句<code>group by</code>建立的。首先来看一个例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> vend_id, <span class="keyword">count</span>(*) <span class="keyword">as</span> num_prods                         #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> vend_id;</div><div class="line">+<span class="comment">---------+-----------+                                       #输出</span></div><div class="line">| vend_id | num_prods |</div><div class="line">+<span class="comment">---------+-----------+</span></div><div class="line">|    1001 |         3 |</div><div class="line">|    1002 |         2 |</div><div class="line">|    1003 |         7 |</div><div class="line">|    1005 |         2 |</div><div class="line">+<span class="comment">---------+-----------+</span></div><div class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>上面的例子指定了两个列，vend_id包含产品供应商的ID，num_prods为计算字段（<code>count(*)</code>）。<code>group by</code>子句指示Mysql按vend_id排序并分组数据，这使得对每个vend_id而不是整个表计算num_prods一次。因为使用了<code>group by</code>子句，就不用指定要计算和聚集的每个组了，系统会自动完成。</p><p>　　注意，<code>group by</code>子句可以包含任意数目的列，这使得能对分组进行嵌套，为数据分组提供更细致的控制。如果使用了嵌套分组，数据将在最后规定的分组上进行汇总。且<code>group by</code>子句中列出的各个列只能是检索列或者有效的表达式，如果在<code>select</code>语句中使用了表达式，则必须在<code>group by</code>子句中指定相同的表达式，不能使用别名。除聚集计算语句之外，<code>select</code>语句中的每个列都必须在<code>group by</code>中子句中给出。如果分组列中有NULL值，其将作为一个组返回（使用<code>with rollup</code>关键字可以显示NULL组）。在语句次序上，<code>group by</code>语句必须在<code>where</code>语句之后<code>order by</code>语句之前。</p><h3 id="2-2-过滤分组"><a href="#2-2-过滤分组" class="headerlink" title="2.2 过滤分组"></a>2.2 过滤分组</h3><p>　　在分组数据时，Mysql还提供过滤分组功能（规定包括哪些分组，排除哪些分组）。实际上在前面数据过滤章节中，我们介绍通过<code>where</code>子句进行行过滤，但是其并不能实现分组过滤。Mysql为达成此任务提供了另外的子句——<code>having</code>子句。其实，之前使用的所有<code>where</code>子句都可以使用<code>having</code>子句来替代（将每行视为一个分组；<code>where</code>子句中的所有操作符同样可在<code>having</code>子句中使用）。下面举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> vend_id, <span class="keyword">count</span>(*) <span class="keyword">as</span> num_prods                           #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_price &gt;= <span class="number">10</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> vend_id</div><div class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) &gt;= <span class="number">2</span>;</div><div class="line">+<span class="comment">---------+-----------+                                         #输出</span></div><div class="line">| vend_id | num_prods |</div><div class="line">+<span class="comment">---------+-----------+</span></div><div class="line">|    1003 |         4 |</div><div class="line">|    1005 |         2 |</div><div class="line">+<span class="comment">---------+-----------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>此条语句中，<code>where</code>子句过滤所有prod_price至少为10的行，然后按vend_id进行分组数据，而<code>having</code>子句过滤计数为2或2以上的分组。</p><h3 id="分组和排序的区别"><a href="#分组和排序的区别" class="headerlink" title="分组和排序的区别"></a>分组和排序的区别</h3><p>　　虽然<code>order by</code>和<code>group by</code>常常完成相同的工作，但实际上它们是非常不同的。首先<code>order by</code>可应用于非检索列，而<code>group by</code>不可以；且，<code>group by</code>子句实际只完成分组工作，并不会对分组结果进行排序。所以在有对输出结果顺序需求时，应该始终给出<code>order by</code>子句。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章节介绍利用Mysql对数据进行分类汇总，即对各个指定组别数据进行汇总（包括求和，均值，极值等）。实现分组的的SQL语句为&lt;code&gt;select&lt;/code&gt;语句的&lt;code&gt;group by&lt;/code&gt;子句和&lt;code&gt;having&lt;/code&gt;子句，而数据汇总是利用SQL的聚集函数。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记（五）——计算字段与函数</title>
    <link href="http://prophetjeff.com/2017/11/17/mysql-5/"/>
    <id>http://prophetjeff.com/2017/11/17/mysql-5/</id>
    <published>2017-11-17T08:20:00.000Z</published>
    <updated>2017-11-17T08:20:11.362Z</updated>
    
    <content type="html"><![CDATA[<p>　　存储在数据库表中的数据往往都是原始数据，通常它们并非以我们需要的格式展现。比如，城市和邮政编码分别存储在同的列中，但邮件标签打印程序需要将它们作为一个字段（恰当格式）检索出来；物品订单表中分别存储了物品的价格和数量，但为了打印发票需要检索物品的总价格。为了实现上述目标，我们需要直接从数据库中检索出经过计算、转换或者格式化的数据（不能理解为检索出原始数据然后再利用相应软件完成此过程），这就是计算字段。计算字段并不实际存储在数据库表中，而是在运行时于<code>select</code>语句中创建的。</p><p>　　实际上，在SQL语句中完成的许多转换和格式化工作都可以在客户机上许多应用软件来完成，但是一般来说在数据库服务器上完成这些操作要比在客户机中更快（因为DBMS是设计来快速有效完成这种处理的）。<br><a id="more"></a></p><h2 id="1-创建计算字段"><a href="#1-创建计算字段" class="headerlink" title="1. 创建计算字段"></a>1. 创建计算字段</h2><h3 id="1-1-拼接字段"><a href="#1-1-拼接字段" class="headerlink" title="1.1 拼接字段"></a>1.1 拼接字段</h3><ul><li><strong>拼接</strong>（concatenate）：将值连接到一起构成单个值。</li></ul><p>　　首先举一个简单的例子，vendors表中包含供应商名和位置信息。假如现在需要生成一个供应商报表，需要在供应商的名字中按照name(location)这样的格式列出供应商的位置。此报表仅需要单个值，但数据库表中的相应数据存储在vend_name和vend_country中，此外还需要将vend_country用括号括起来。上述要求可以在Mysql的<code>select</code>语句中使用<code>concat()</code>函数来实现拼接这两个列。如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(vend_name,<span class="string">'('</span>,vend_country,<span class="string">')'</span>)                 #输入</div><div class="line"><span class="keyword">from</span> vendors</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</div><div class="line">+<span class="comment">----------------------------------------+                    #输出</span></div><div class="line">| concat(vend_name,'(',vend_country,')') |</div><div class="line">+<span class="comment">----------------------------------------+</span></div><div class="line">| ACME(USA)                              |</div><div class="line">| Anvils R Us(USA)                       |</div><div class="line">| Furball Inc.(USA)                      |</div><div class="line">| Jet <span class="keyword">Set</span>(England)                       |</div><div class="line">| Jouets Et Ours(France)                 |</div><div class="line">| LT Supplies(USA)                       |</div><div class="line">+<span class="comment">----------------------------------------+</span></div><div class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</div></pre></td></tr></table></figure><p>可见，<code>concat()</code>函数将其括号内的参数进行拼接，各个参数之间由逗号分隔。注意，在数据类型为字符串时容易疏忽掉空格，Mysql提供<code>rtrim()</code>函数和<code>ltrim()</code>函数来分别实现去掉字符串右边和左边的空格。如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="keyword">rtrim</span>(vend_name),<span class="string">'('</span>,<span class="keyword">rtrim</span>(vend_country),<span class="string">')'</span>)                 #输入</div><div class="line"><span class="keyword">from</span> vendors</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</div></pre></td></tr></table></figure><h3 id="1-2-使用别名"><a href="#1-2-使用别名" class="headerlink" title="1.2 使用别名"></a>1.2 使用别名</h3><p>　　从上例可以看出，输出的拼接字段结果实际上是没有名字的，它只是一个值。要在客户机应用中应用该拼接字段或许会出现困难，SQL为了解决这个问题而支持列别名。别名是一个字段或值的替换名，使用<code>as</code>关键字赋予。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(vend_name,<span class="string">'('</span>,vend_country,<span class="string">')'</span>) <span class="keyword">as</span> vend_title                 #输入</div><div class="line"><span class="keyword">from</span> vendors</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</div><div class="line">+<span class="comment">------------------------+                                                  #输出</span></div><div class="line">| vend_title             |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| ACME(USA)              |</div><div class="line">| Anvils R Us(USA)       |</div><div class="line">| Furball Inc.(USA)      |</div><div class="line">| Jet <span class="keyword">Set</span>(England)       |</div><div class="line">| Jouets Et Ours(France) |</div><div class="line">| LT Supplies(USA)       |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>上述语句本身作用与上一个例子相同，但本语句在计算字段之后跟了<code>as vend_title</code>。它指示SQL创建一个包含指定计算的名为<code>vend_title</code>的计算字段。任何客户机应用都可以按名引用这个列。</p><h3 id="1-3-执行算数计算"><a href="#1-3-执行算数计算" class="headerlink" title="1.3 执行算数计算"></a>1.3 执行算数计算</h3><p>　　除了拼接字段，计算字段的第二种常见用途是对检索的数据进行算数运算。首先来看下面这个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_id, quantity, item_price, quantity*item_price <span class="keyword">as</span> expanded_price #输入</div><div class="line"><span class="keyword">from</span> orderitems</div><div class="line"><span class="keyword">where</span> order_num = <span class="number">20005</span>;</div><div class="line">+<span class="comment">---------+----------+------------+----------------+                        #输出</span></div><div class="line">| prod_id | quantity | item_price | expanded_price |</div><div class="line">+<span class="comment">---------+----------+------------+----------------+</span></div><div class="line">| ANV01   |       10 |       5.99 |          59.90 |</div><div class="line">| ANV02   |        3 |       9.99 |          29.97 |</div><div class="line">| TNT2    |        5 |      10.00 |          50.00 |</div><div class="line">| FB      |        1 |      10.00 |          10.00 |</div><div class="line">+<span class="comment">---------+----------+------------+----------------+</span></div><div class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.15</span> sec)</div></pre></td></tr></table></figure><p>上述语句检索出了订单号为20005的所有物品，并检索出它们的产品ID，产品数量，产品单价和总价。其中产品总价<code>expanded_price</code>为一个计算字段，此计算为<code>quantity*item_price</code>,列别名为<code>expanded_price</code>。如下给出Mysql支持的基本算数操作符，此外圆括号可以用来区分优先顺序：</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td></tr></tbody></table><p>可以使用<code>select</code>语句测试计算，比如<code>select 2*5;</code>将返回<code>10</code>。</p><h2 id="2-使用数据处理函数"><a href="#2-使用数据处理函数" class="headerlink" title="2. 使用数据处理函数"></a>2. 使用数据处理函数</h2><p>　　同其他计算语言一样，SQL支持利用函数来处理数据，如前面已经用过的<code>concat()</code>函数。函数一般是在数据上执行的，它给数据的转换和处理提供了方便。注意，相比SQL语句函数的可移植性并不强，几乎每种DBMS都支持只适用于本身的函数。因此，在使用函数时最好进行代码注释。大多数SQL实现支持以下类型的函数：</p><ul><li>用于处理文本串的文本函数（如删除、填充或转换值）。</li><li>用于在数值数据上进行算数操作的数值函数（如返回绝对值，进行代数运算）。</li><li>用于处理日期和时间的函数（如返回两个日期差等等）。</li><li>返回DBMS特殊信息的函数（如用户登录信息，版本信息）。</li></ul><h3 id="2-1-文本处理函数"><a href="#2-1-文本处理函数" class="headerlink" title="2.1 文本处理函数"></a>2.1 文本处理函数</h3><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">left()</td><td style="text-align:center">返回串左边的字符</td></tr><tr><td style="text-align:center">length()</td><td style="text-align:center">返回串的长度</td></tr><tr><td style="text-align:center">locate()</td><td style="text-align:center">找出串的一个子串</td></tr><tr><td style="text-align:center">lower()</td><td style="text-align:center">将串转换为小写</td></tr><tr><td style="text-align:center">ltrim()</td><td style="text-align:center">去掉串左边的空格</td></tr><tr><td style="text-align:center">right()</td><td style="text-align:center">返回串右边的字符</td></tr><tr><td style="text-align:center">rtrim()</td><td style="text-align:center">去掉串右边的空格</td></tr><tr><td style="text-align:center">soundex()</td><td style="text-align:center">返回串的soundex值</td></tr><tr><td style="text-align:center">substring()</td><td style="text-align:center">返回子串的字符</td></tr><tr><td style="text-align:center">upper()</td><td style="text-align:center">将串转换为大写</td></tr></tbody></table><p>注意，SOUNDEX是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX考虑了类似的发音字符和音节，使得能对串进行发音比较而不是字母比较。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> cust_name, cust_contact                                              #输入</div><div class="line"><span class="keyword">from</span> customers</div><div class="line"><span class="keyword">where</span> <span class="keyword">soundex</span>(cust_contact) = <span class="keyword">soundex</span>(<span class="string">'Y. Lie'</span>);</div><div class="line">+<span class="comment">-------------+--------------+                                              #输出</span></div><div class="line">| cust_name   | cust_contact |</div><div class="line">+<span class="comment">-------------+--------------+</span></div><div class="line">| Coyote Inc. | Y Lee        |</div><div class="line">+<span class="comment">-------------+--------------+</span></div><div class="line">1 row in <span class="keyword">set</span> (<span class="number">0.09</span> sec)</div></pre></td></tr></table></figure><h3 id="2-2-日期和时间处理函数"><a href="#2-2-日期和时间处理函数" class="headerlink" title="2.2 日期和时间处理函数"></a>2.2 日期和时间处理函数</h3><p>　　日期和时间采用相应的数据类型和特殊的格式存储，以便能快速和有效地排序或过滤，并且节省物理存储空间。一般，应用程序不使用用来存储日期和时间的格式，因此日期和时间函数总是被用来读取、统计和处理这些值。如下是常用的日期和时间处理函数：</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">adddate()</td><td style="text-align:center">增加一个日期（天、周等）</td></tr><tr><td style="text-align:center">addtime()</td><td style="text-align:center">增加一个时间（时、分等）</td></tr><tr><td style="text-align:center">curdate()</td><td style="text-align:center">返回当前日期</td></tr><tr><td style="text-align:center">curtime()</td><td style="text-align:center">返回当前时间</td></tr><tr><td style="text-align:center">date()</td><td style="text-align:center">返回日期时间的日期部分</td></tr><tr><td style="text-align:center">datediff()</td><td style="text-align:center">计算两个日期之差</td></tr><tr><td style="text-align:center">date_add()</td><td style="text-align:center">高度灵活的日期计算函数</td></tr><tr><td style="text-align:center">date_format()</td><td style="text-align:center">返回一个格式化日期或时间串</td></tr><tr><td style="text-align:center">day()</td><td style="text-align:center">返回一个日期的天数部分</td></tr><tr><td style="text-align:center">day0fweek()</td><td style="text-align:center">对于一个日期，返回对应的星期几</td></tr><tr><td style="text-align:center">hour()</td><td style="text-align:center">返回一个时间的小时部分</td></tr><tr><td style="text-align:center">minute()</td><td style="text-align:center">返回一个时间的分钟部分</td></tr><tr><td style="text-align:center">month()</td><td style="text-align:center">返回一个时间的月份部分</td></tr><tr><td style="text-align:center">now()</td><td style="text-align:center">返回当前日期和时间</td></tr><tr><td style="text-align:center">second()</td><td style="text-align:center">返回一个时间的秒部分</td></tr><tr><td style="text-align:center">time()</td><td style="text-align:center">返回一个日期时间的时间部分</td></tr><tr><td style="text-align:center">year()</td><td style="text-align:center">返回一个日期的年份部分</td></tr></tbody></table><p>注意，在Mysql中使用的日期格式为yyyy-mm-dd，虽然一些其他格式也可行，但这是首选的日期格式（它排除了多义性）。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> cust_id, order_num                                                  #输入</div><div class="line"><span class="keyword">from</span> orders</div><div class="line"><span class="keyword">where</span> <span class="built_in">date</span>(order_date) = <span class="string">'2005-09-01'</span>;</div><div class="line">+<span class="comment">---------+-----------+                                                    #输出</span></div><div class="line">| cust_id | order_num |</div><div class="line">+<span class="comment">---------+-----------+</span></div><div class="line">|   10001 |     20005 |</div><div class="line">+<span class="comment">---------+-----------+</span></div><div class="line">1 row in <span class="keyword">set</span> (<span class="number">0.09</span> sec)</div></pre></td></tr></table></figure><h3 id="2-3-数值处理函数"><a href="#2-3-数值处理函数" class="headerlink" title="2.3 数值处理函数"></a>2.3 数值处理函数</h3><p>　　此类函数仅处理数值函数，一般主要用于代数、三角或几何运算，因此没有串或日期-时间处理函数的使用那么频繁。如下表：</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">abs()</td><td style="text-align:center">返回一个数的绝对值</td></tr><tr><td style="text-align:center">cos()</td><td style="text-align:center">返回一个角度的余弦</td></tr><tr><td style="text-align:center">exp()</td><td style="text-align:center">返回一个数的指数值</td></tr><tr><td style="text-align:center">mod()</td><td style="text-align:center">返回除法操作的余数</td></tr><tr><td style="text-align:center">pi()</td><td style="text-align:center">返回圆周率</td></tr><tr><td style="text-align:center">rand()</td><td style="text-align:center">返回一个随机数</td></tr><tr><td style="text-align:center">sin()</td><td style="text-align:center">返回一个角度的正弦</td></tr><tr><td style="text-align:center">sqrt()</td><td style="text-align:center">返回一个数的平方根</td></tr><tr><td style="text-align:center">tan()</td><td style="text-align:center">返回一个角度的正切</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　存储在数据库表中的数据往往都是原始数据，通常它们并非以我们需要的格式展现。比如，城市和邮政编码分别存储在同的列中，但邮件标签打印程序需要将它们作为一个字段（恰当格式）检索出来；物品订单表中分别存储了物品的价格和数量，但为了打印发票需要检索物品的总价格。为了实现上述目标，我们需要直接从数据库中检索出经过计算、转换或者格式化的数据（不能理解为检索出原始数据然后再利用相应软件完成此过程），这就是计算字段。计算字段并不实际存储在数据库表中，而是在运行时于&lt;code&gt;select&lt;/code&gt;语句中创建的。&lt;/p&gt;
&lt;p&gt;　　实际上，在SQL语句中完成的许多转换和格式化工作都可以在客户机上许多应用软件来完成，但是一般来说在数据库服务器上完成这些操作要比在客户机中更快（因为DBMS是设计来快速有效完成这种处理的）。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记（四）——数据过滤</title>
    <link href="http://prophetjeff.com/2017/11/16/mysql-4/"/>
    <id>http://prophetjeff.com/2017/11/16/mysql-4/</id>
    <published>2017-11-16T01:52:03.000Z</published>
    <updated>2017-11-16T11:59:39.411Z</updated>
    
    <content type="html"><![CDATA[<p>　　数据库表包含了大量的数据，通常我们并不期望检索表中的所有行。正如在上一章节中采用<code>limit</code>子句实现结果限定一样，更一般地，我们希望准确检索到表中的特定数据（即表中数据的子集）。这需要在<code>select</code>语句检索中指定搜索条件来完成，搜索条件也称为过滤条件。本章节通过介绍<code>select</code>语句中的<code>where</code>子句，通配符以及正则表达式来实现数据过滤。<br><a id="more"></a></p><h2 id="1-使用WHERE子句过滤数据"><a href="#1-使用WHERE子句过滤数据" class="headerlink" title="1. 使用WHERE子句过滤数据"></a>1. 使用WHERE子句过滤数据</h2><p>　　在<code>select</code>语句中，数据根据<code>where</code>子句中指定的搜索条件进行过滤。注意使用多个子句时的次序，如果出现<code>order by</code>子句，那么<code>where</code>子句需要使用在前者之前，否则将会报错。</p><h3 id="1-1-WHERE子句条件操作符"><a href="#1-1-WHERE子句条件操作符" class="headerlink" title="1.1 WHERE子句条件操作符"></a>1.1 WHERE子句条件操作符</h3><p>　　首先来看一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name, prod_price            #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_price = <span class="number">2.5</span>;</div><div class="line">+<span class="comment">---------------+------------+          #输出</span></div><div class="line">| prod_name     | prod_price |</div><div class="line">+<span class="comment">---------------+------------+</span></div><div class="line">| Carrots       |       2.50 |</div><div class="line">| TNT (1 stick) |       2.50 |</div><div class="line">+<span class="comment">---------------+------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</div></pre></td></tr></table></figure><p>上述语句表示从products表中检索两个列，但不返回其所有行而是返回prod_price等于2.5的行。这个例子采用简单的相等搜索条件，它检查一个列是否具有指定的值，并据此进行过滤，但是SQL能够实现不只如此。下面列出了更多WHERE子句操作符：</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">说明</th><th style="text-align:center">操作符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于</td><td style="text-align:center">&lt;&gt;</td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">!=</td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td><td style="text-align:center">between</td><td style="text-align:center">在指定两个值之间</td></tr></tbody></table><p>注意，需要使用单引号来限定字符串，如果将值与串类型的列进行比较则需要限定引号，而与数值比较时不需要。下例使用了BETWEEN操作符，其语法与其他WHERE子句操作符略有不同，它需要提供两个值（即范围的起始值和结束值）并使用<code>and</code>关键连接，BETWEEN则匹配该范围中的所有值包括端点值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name, prod_price              #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_price <span class="keyword">between</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">10</span>;</div><div class="line">+<span class="comment">----------------+------------+           #输出</span></div><div class="line">| prod_name      | prod_price |</div><div class="line">+<span class="comment">----------------+------------+</span></div><div class="line">| .5 ton anvil   |       5.99 |</div><div class="line">| 1 ton anvil    |       9.99 |</div><div class="line">| Bird seed      |      10.00 |</div><div class="line">| Oil can        |       8.99 |</div><div class="line">| TNT (5 sticks) |      10.00 |</div><div class="line">+<span class="comment">----------------+------------+</span></div><div class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</div></pre></td></tr></table></figure><h3 id="如何进行空值检查？"><a href="#如何进行空值检查？" class="headerlink" title="如何进行空值检查？"></a>如何进行空值检查？</h3><p>　　在创建表时，设计人员可以指定其中的列是否可以不包含值。一个列不包含值时，称其为包含空值NULL。要注意，空值与字段包含0、空字符串、空格不同。<code>select</code>语句中有一条特殊的<code>where</code>子句，可以实现检索具有空值的列，如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name                 #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_price <span class="keyword">is</span> <span class="literal">null</span>;</div><div class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)             #输出</div></pre></td></tr></table></figure><p>这条语句返回没有价格（空prod_price字段，非价格为0）的所有产品，由于表中没有这样的行，所以没有返回数据。注意，在通过筛选不具有特定值（&lt;&gt;条件操作符）的行时，可能希望返回具有NULL值的行，但是实际上未知是有特定含义的，数据库不知道它们是否匹配所以不会返回NULL值，需要进行进一步验证。</p><h3 id="组合WHERE子句"><a href="#组合WHERE子句" class="headerlink" title="组合WHERE子句"></a>组合WHERE子句</h3><p>　　上述介绍的所有<code>where</code>子句在过滤数据时使用的都是单一的条件，实际中往往需要通过多个<code>where</code>子句建立更强更高级的搜索条件。Mysql可以通过<code>and</code>和<code>or</code>操作符连接多条<code>where</code>子句。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_id, prod_price, prod_name              #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> vend_id = <span class="number">1003</span> <span class="keyword">and</span> prod_price &lt;= <span class="number">10</span>;</div><div class="line">+<span class="comment">---------+------------+----------------+          #输出</span></div><div class="line">| prod_id | prod_price | prod_name      |</div><div class="line">+<span class="comment">---------+------------+----------------+</span></div><div class="line">| FB      |      10.00 | Bird seed      |</div><div class="line">| FC      |       2.50 | Carrots        |</div><div class="line">| SLING   |       4.49 | Sling          |</div><div class="line">| TNT1    |       2.50 | TNT (1 stick)  |</div><div class="line">| TNT2    |      10.00 | TNT (5 sticks) |</div><div class="line">+<span class="comment">---------+------------+----------------+</span></div><div class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>上述语句检索供应商ID为1003且价格小于等于10美元的所有产品，<code>and</code>关键字用在<code>where</code>子句中可检索同时满足给定条件的行。当然，可以将更多过滤条件组合在一起，但每添加一条就需要再加一个关键字。</p><p>　　类似地，<code>or</code>操作符用在<code>where</code>子句中可检索满足任一给定条件的行。需要特别注意的是，<code>where</code>子句可包含任意数目的<code>and</code>和<code>or</code>操作符，两者结合可以实现更复杂的检索。但组合<code>and</code>和<code>or</code>会面临一个问题——处理次序。SQL在处理<code>or</code>操作符前会优先处理<code>and</code>操作符，即<code>and</code>的优先级更高。为了避免出现歧义和错误，可以使用圆括号对操作符进行明确的分组，而不应该过分依赖默认次序。</p><h3 id="WHERE子句中的IN操作符和NOT操作符"><a href="#WHERE子句中的IN操作符和NOT操作符" class="headerlink" title="WHERE子句中的IN操作符和NOT操作符"></a>WHERE子句中的IN操作符和NOT操作符</h3><ul><li><code>in</code>：<code>in</code>操作符用来指定条件范围，范围中的每个条件都可以进行匹配。</li><li><code>not</code>：<code>not</code>操作符是用来否定后跟条件的关键字。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name, prod_price            #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> vend_id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1002</span>,<span class="number">1003</span>)</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</div><div class="line">+<span class="comment">--------------+------------+           #输出</span></div><div class="line">| prod_name    | prod_price |</div><div class="line">+<span class="comment">--------------+------------+</span></div><div class="line">| .5 ton anvil |       5.99 |</div><div class="line">| 1 ton anvil  |       9.99 |</div><div class="line">| 2 ton anvil  |      14.99 |</div><div class="line">| JetPack 1000 |      35.00 |</div><div class="line">| JetPack 2000 |      55.00 |</div><div class="line">+<span class="comment">--------------+------------+</span></div><div class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>要注意，此处的<code>(1002,1003)</code>并非代表一个区间，而是包含1002及1003这两个元素的集合。区间的表示是使用<code>between</code>操作符。</p><p>　　上例语句检索了非1002及1003供应商的所有产品及其价格，并按照产品名进行排序。可以看出，<code>in</code>操作符的功能与<code>or</code>功能非常相似，实际上，在使用多个过滤条件时<code>in</code>操作符更加清楚直观执行更快（因为它使用的操作符更少）。<code>in</code>操作符的最大优点在于它可以包含其他<code>select</code>语句（子查询），在后续的章节中会对它进行介绍。同样地，<code>not</code>关键字可以简化更加复杂的多个过滤条件，提高效率。</p><h2 id="2-使用通配符进行过滤"><a href="#2-使用通配符进行过滤" class="headerlink" title="2. 使用通配符进行过滤"></a>2. 使用通配符进行过滤</h2><p>　　前文介绍的所有操作符都是针对已知值进行过滤的，但有的时候我们对自己要检索的数据了解得并不是那么全面或者说清楚。比如，如何检索在产品名中包含文本“jet”的所有产品？显然，前文提供的方法都行不通，因为我们不清楚自己要检索的产品名称具体是什么，这时，我们需要使用通配符创建特定的搜索模式。</p><p>　　在搜索子句中要使用通配符，必须使用<code>like</code>操作符。<code>like</code>指示Mysql后跟的搜索模式利用通配符匹配，而不是直接相等匹配进行比较。</p><ul><li><strong>通配符</strong>（wildcard）：用来匹配值的一部分的特殊字符。</li><li><strong>搜索模式</strong>（search pattern）：由字面值、通配符或两者组合构成的搜索条件。</li><li><strong>谓词</strong>（predicate）：操作符何时不是操作符？答案是在它作为谓词时。（从技术上说，<code>like</code>是谓词而不是操作符，虽然最终的结果是相同的，但需要对此术语进行了解，以免在SQL文档中遇到此术语时不知道）。</li></ul><h3 id="2-1-百分号（-）通配符"><a href="#2-1-百分号（-）通配符" class="headerlink" title="2.1 百分号（%）通配符"></a>2.1 百分号（%）通配符</h3><p>　　最常使用的通配符是百分号（%）。在搜索中，%表示任何字符出现任意次数。例如，为了找出所有产品名以“jet”起始的产品，可以使用如下<code>select</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_id, prod_name              #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'jet%'</span>;</div><div class="line">+<span class="comment">---------+--------------+             #输出</span></div><div class="line">| prod_id | prod_name    |</div><div class="line">+<span class="comment">---------+--------------+</span></div><div class="line">| JP1000  | JetPack 1000 |</div><div class="line">| JP2000  | JetPack 2000 |</div><div class="line">+<span class="comment">---------+--------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>此例使用的搜索模式为’jet%’，在执行这条子句时将检索任意以“jet”起头的词。<code>%</code>告诉Mysql接受“jet”之后的任意字符。注意，通配符可以在搜索模式中任意位置中使用，并且可以使用多个通配符。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_id, prod_name          #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'%anvil%'</span>     #表示匹配任何位置包含文本anvil的值</div></pre></td></tr></table></figure><p>注意，<code>%</code>代表搜索模式中给定位置的0个，1个或多个字符（NULL除外，即<code>like &#39;%&#39;</code>也不能匹配NULL值，而空格不是空值是字符不要疏忽）。</p><h3 id="2-2-下划线（-）通配符"><a href="#2-2-下划线（-）通配符" class="headerlink" title="2.2 下划线（_）通配符"></a>2.2 下划线（_）通配符</h3><p>　　下划线通配符与百分号通配符用途基本一致，但是下划线只匹配单个字符而不是多个。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_id, prod_name                 #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'_ ton anvil'</span>;</div><div class="line">+<span class="comment">---------+-------------+                 #输出</span></div><div class="line">| prod_id | prod_name   |</div><div class="line">+<span class="comment">---------+-------------+</span></div><div class="line">| ANV02   | 1 ton anvil |</div><div class="line">| ANV03   | 2 ton anvil |</div><div class="line">+<span class="comment">---------+-------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>　　正如上述，Mysql通配符功能强大，但是这种共也是有代价的，使用通配符的检索处理往往比其他检索花的时间更长。因此，不要过度使用通配符（如果其他操作符能达到相同目的尽量使用其他操作符）。除非绝对必要，尽量不要讲通配符置于开始处，这样检索起来是最慢的。其次，要特别注意通配符的位置，如果位置错误可能不会返回你想要的数据。</p><h2 id="3-使用正则表达式进行检索"><a href="#3-使用正则表达式进行检索" class="headerlink" title="3. 使用正则表达式进行检索"></a>3. 使用正则表达式进行检索</h2><p>　　对于基本的检索和过滤，前文使用的匹配、比较和通配符基本可以实现。但如果过滤条件更加复杂，比如从文本块中提取电话号码，找到重复单词等等目标，仅仅采用前文方法就不足以实现。正则表达式是通过正则表达式语言来建立，可以完成上述及更广泛目标（匹配文本）的特殊语言。Mysql用<code>where</code>子句对正则表达式提供了初步支持（Mysql仅支持多数正则表达式实现的一个很小的子集），允许指定正则表达式来过滤<code>select</code>语句检索出的数据。</p><h3 id="3-1-基本字符匹配"><a href="#3-1-基本字符匹配" class="headerlink" title="3.1 基本字符匹配"></a>3.1 基本字符匹配</h3><p>　　首先来看下面这个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name                    #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'.000'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</div><div class="line">+<span class="comment">--------------+                    #输出</span></div><div class="line">| prod_name    |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">| JetPack 1000 |</div><div class="line">| JetPack 2000 |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>这里使用了正则表达式<code>&#39;.000&#39;</code>。其中<code>.</code>是正则表达式语言中的一个特殊字符，它表示匹配任意一个字符。<code>regexp</code>关键字告诉Mysql后跟的东西作为正则表达式处理。当然，这个特殊的例子也可以通过<code>like</code>关键字和通配符来完成。注意，<code>like</code>和<code>regexp</code>的区别，<code>like</code>匹配整个列（如果不使用通配符来帮助的话），而<code>regexp</code>在列值内进行匹配。Mysql中的正则表达式不区分大小写，若要区分可使用<code>binary</code>关键字，如<code>where prod_name regexp binary &#39;JetPack .000&#39;</code>。</p><h3 id="3-2-进行OR匹配"><a href="#3-2-进行OR匹配" class="headerlink" title="3.2 进行OR匹配"></a>3.2 进行OR匹配</h3><p>　　见下面这个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name                             #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'1000|2000|3000'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</div><div class="line">+<span class="comment">--------------+                             #输出</span></div><div class="line">| prod_name    |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">| JetPack 1000 |</div><div class="line">| JetPack 2000 |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p><code>|</code>是正则表达式中的OR操作符，它表示匹配其中之一。</p><h3 id="3-3-匹配几个字符之一"><a href="#3-3-匹配几个字符之一" class="headerlink" title="3.3 匹配几个字符之一"></a>3.3 匹配几个字符之一</h3><p>　　要匹配特定的字符，可以使用一组被<code>[</code>和<code>]</code>括起来 字符来完成。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name                              #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'[123] ton'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</div><div class="line">+<span class="comment">-------------+                               #输出</span></div><div class="line">| prod_name   |</div><div class="line">+<span class="comment">-------------+</span></div><div class="line">| 1 ton anvil |</div><div class="line">| 2 ton anvil |</div><div class="line">+<span class="comment">-------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>这里，<code>[123]</code>定义一组字符，它的意思是匹配1或2或3。正如所见，<code>[]</code>是另一种形式的OR语句，它是<code>[1|2|3] ton</code>的缩写，也可以使用后者。至于为和需要用<code>[]</code>来定义OR语句要查找什么，各位可以自己试一试去掉<code>[]</code>会发生什么。注意，字符集合也可以被否定（即，它们将匹配除指定字符外的任何东西，这一目的通过在<code>[]</code>内开始处放置一个<code>^</code>来完成，如<code>[^123]</code>）。</p><h3 id="3-4-匹配范围"><a href="#3-4-匹配范围" class="headerlink" title="3.4 匹配范围"></a>3.4 匹配范围</h3><p>　　集合可以用来定义要匹配的一个或多个字符，比如<code>[123456789]</code>。但显然，当字符元素过多时，使用这种表达将会变得麻烦而且容易出错。可以使用<code>-</code>来定义一个范围，达到简化集合的作用，如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name                              #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'[1-3] ton'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</div><div class="line">+<span class="comment">-------------+                               #输出</span></div><div class="line">| prod_name   |</div><div class="line">+<span class="comment">-------------+</span></div><div class="line">| 1 ton anvil |</div><div class="line">| 2 ton anvil |</div><div class="line">+<span class="comment">-------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>注意，范围不一定只可以是数值的，比如<code>[a-z]</code>匹配任意字母字符。</p><h3 id="3-5-匹配特殊字符"><a href="#3-5-匹配特殊字符" class="headerlink" title="3.5 匹配特殊字符"></a>3.5 匹配特殊字符</h3><p>　　此处所说的特殊字符是正则表示语言中使用过的字符，比如要匹配文本中的“.”，而<code>.</code>在正则表达式中有特殊含义，因此此处需要使用转义（由<code>\\</code>来引导），如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> vend_name                             #输入</div><div class="line"><span class="keyword">from</span> vendors</div><div class="line"><span class="keyword">where</span> vend_name regexp <span class="string">'\\.'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</div><div class="line">+<span class="comment">--------------+                             #输出</span></div><div class="line">| vend_name    |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">| Furball Inc. |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</div></pre></td></tr></table></figure><h3 id="3-6-匹配字符类"><a href="#3-6-匹配字符类" class="headerlink" title="3.6 匹配字符类"></a>3.6 匹配字符类</h3><p>　　实际中会遇到检索自己常使用的数字、所有字母字符或所有数字字母字符等的匹配。为了方便起见，可以使用预定的字符集，称为字符类（character class）。见下表：</p><table><thead><tr><th style="text-align:center">类</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">[:alnum:]</td><td style="text-align:left">任意数字和字母（同<code>[a-zA-Z0-9]</code>）</td></tr><tr><td style="text-align:center">[:alpha:]</td><td style="text-align:left">任意字符（同<code>[a-zA-Z]</code>）</td></tr><tr><td style="text-align:center">[:blank:]</td><td style="text-align:left">空格和制表（同<code>[\\t]</code>）</td></tr><tr><td style="text-align:center">[:cntrl:]</td><td style="text-align:left">ASCII控制字符（ASCII0到31和127）</td></tr><tr><td style="text-align:center">[:digit:]</td><td style="text-align:left">任意数字（同<code>[0-9]</code>）</td></tr><tr><td style="text-align:center">[:graph:]</td><td style="text-align:left">与[:print:]相同但不包括空格</td></tr><tr><td style="text-align:center">[:lower:]</td><td style="text-align:left">任意小写字母（同<code>[a-z]</code>）</td></tr><tr><td style="text-align:center">[:print:]</td><td style="text-align:left">任意可打印字符</td></tr><tr><td style="text-align:center">[:punct:]</td><td style="text-align:left">既不在[:alnum:]又不在[:cntrl:]中的任意字符</td></tr><tr><td style="text-align:center">[:space:]</td><td style="text-align:left">包括空格在内的任意空白字符（同<code>[\\f\\n\\r\\t\\v]</code>）</td></tr><tr><td style="text-align:center">[:upper:]</td><td style="text-align:left">任意大写字母（同<code>[A-Z]</code>）</td></tr><tr><td style="text-align:center">[:xdigit:]</td><td style="text-align:left">任意十六进制数字（同<code>[a-fA-F0-9]</code>）</td></tr></tbody></table><h3 id="3-7-匹配多个实例"><a href="#3-7-匹配多个实例" class="headerlink" title="3.7 匹配多个实例"></a>3.7 匹配多个实例</h3><p>　　目前使用的所用正则表达式都试图匹配单词出现，有时候，需要的检索对匹配的数目控制更强。例如，想要搜寻所有的数，不管包含都少个数字，或者寻找一个单词且还能够适应一个尾随的s（如果存在）等等。这可以通过正则表达式的重复元字符来完成。下面是正则表达式重复元字符表:</p><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">0个或多个匹配</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">1个或多个匹配</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">0个或1个匹配</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:left">指定数目的匹配</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:left">不少于指定数目的匹配</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:left">匹配数目的范围（m不超过225）</td></tr></tbody></table><p>下面是一个使用重复元字符的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name                                    #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'\\([0-9] sticks?\\)'</span>        #？使其前一个字母s可选</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</div><div class="line">+<span class="comment">----------------+                                  #输出</span></div><div class="line">| prod_name      |</div><div class="line">+<span class="comment">----------------+</span></div><div class="line">| TNT (1 stick)  |</div><div class="line">| TNT (5 sticks) |</div><div class="line">+<span class="comment">----------------+</span></div><div class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><h3 id="3-8-定位符"><a href="#3-8-定位符" class="headerlink" title="3.8 定位符"></a>3.8 定位符</h3><p>　　前述所有例子都是匹配一个串中任意位置的文本，想要匹配特定位置的文本需要使用下表列出的定位符：</p><table><thead><tr><th style="text-align:center">定位元字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">文本的开始</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">文本的结尾</td></tr><tr><td style="text-align:center">[[:&lt;:]]</td><td style="text-align:center">词的开始</td></tr><tr><td style="text-align:center">[[:&gt;:]]</td><td style="text-align:center">词的结尾</td></tr></tbody></table><p>　　例如，若想找出一个数（包括以一个小数点开始的数）开头的所有产品名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name                                     #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'^[0-9\\.]'</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</div><div class="line">+<span class="comment">--------------+                                     #输出</span></div><div class="line">| prod_name    |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">| .5 ton anvil |</div><div class="line">| 1 ton anvil  |</div><div class="line">| 2 ton anvil  |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>注意，<code>^</code>有双重用途，在集合中（由<code>[</code>和<code>]</code>定义）它用于否定该集合；否则，它用来指串的开始处。</p><h3 id="如何测试正则表达式？"><a href="#如何测试正则表达式？" class="headerlink" title="如何测试正则表达式？"></a>如何测试正则表达式？</h3><p>　　实际中可以在不使用数据库表的情况下用<code>select</code>来测试正则表达式，此时，<code>regexp</code>总是返回0（没有匹配）或1（匹配）。例如<code>select &#39;hello&#39; regexp &#39;[0-9]&#39;;</code>，这个例子返回的结果是0。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　数据库表包含了大量的数据，通常我们并不期望检索表中的所有行。正如在上一章节中采用&lt;code&gt;limit&lt;/code&gt;子句实现结果限定一样，更一般地，我们希望准确检索到表中的特定数据（即表中数据的子集）。这需要在&lt;code&gt;select&lt;/code&gt;语句检索中指定搜索条件来完成，搜索条件也称为过滤条件。本章节通过介绍&lt;code&gt;select&lt;/code&gt;语句中的&lt;code&gt;where&lt;/code&gt;子句，通配符以及正则表达式来实现数据过滤。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
      <category term="通配符" scheme="http://prophetjeff.com/tags/%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    
      <category term="正则表达式" scheme="http://prophetjeff.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记（三）——数据检索与排序</title>
    <link href="http://prophetjeff.com/2017/11/15/mysql-3/"/>
    <id>http://prophetjeff.com/2017/11/15/mysql-3/</id>
    <published>2017-11-15T07:10:00.000Z</published>
    <updated>2017-11-15T07:27:53.884Z</updated>
    
    <content type="html"><![CDATA[<p>　　本节介绍数据的检索与排序，此操作将由<code>select</code>语句及其子句<code>order by</code>分别实现。要知道，SQL语句是由简单的英语单词构成，如<code>select</code>，<code>create</code>这些单词在SQL语言中被称为关键字。接触过SQL语言的小伙伴应该知道<code>select</code>基本算是最常使用的SQL关键字了，它几乎就是SQL的象征，下面是<code>select</code>的表演时间。<br><a id="more"></a></p><h2 id="1-检索数据"><a href="#1-检索数据" class="headerlink" title="1. 检索数据"></a>1. 检索数据</h2><p>　　首先，<code>select</code>语句的用途是从一个或多个表中检索信息，而要使用其来检索表数据至少需要给出两条信息：一是想检索的是什么，二是从什么地方进行检索（比如你要检索的信息来自哪张表）。</p><h4 id="1-1-检索单个列"><a href="#1-1-检索单个列" class="headerlink" title="1.1 检索单个列"></a>1.1 检索单个列</h4><p>　　比如，想从产品表（products）中检索产品名对应的列（prod_name）,需要<code>select</code>语句后接列名，并使用<code>from</code>关键字指出存放该数据的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name     #输入</div><div class="line"><span class="keyword">from</span> products;    </div><div class="line">+<span class="comment">----------------+   #输出</span></div><div class="line">| prod_name      |</div><div class="line">+<span class="comment">----------------+</span></div><div class="line">| .5 ton anvil   |</div><div class="line">| 1 ton anvil    |</div><div class="line">| 2 ton anvil    |</div><div class="line">| Detonator      |</div><div class="line">| Bird seed      |</div><div class="line">| Carrots        |</div><div class="line">| Fuses          |</div><div class="line">| JetPack 1000   |</div><div class="line">| JetPack 2000   |</div><div class="line">| Oil can        |</div><div class="line">| Safe           |</div><div class="line">| Sling          |</div><div class="line">| TNT (1 stick)  |</div><div class="line">| TNT (5 sticks) |</div><div class="line">+<span class="comment">----------------+</span></div><div class="line">14 rows in <span class="keyword">set</span> (<span class="number">0.05</span> sec)</div></pre></td></tr></table></figure><p>上述<code>select</code>语句返回products表中prod_name这一列的所有行，且没有经过排序（也就是说重复上述语句输出的结果顺序可能不一致，要知道没有经过排序而考察顺序是毫无意义的，只要行数一致就是正常的）。</p><p>　　注意，SQL关键字不区分大小写。在处理SQL语句时其中的空格都将被忽略，即SQL语句可以在一行给出也可以进行分行（分行会使语句更容易阅读和调试）。多条语句间必须使用<code>;</code>加以分割，在多数的DBMS中，单条语句后<code>;</code>可加可不加，但是如果使用的是mysql命令行实用程序，必须加上<code>;</code>来结束SQL语句。</p><h4 id="1-2-检索多个列"><a href="#1-2-检索多个列" class="headerlink" title="1.2 检索多个列"></a>1.2 检索多个列</h4><p>　　如果想要从一张表上检索多个列，也采用与上述相同的<code>select</code>语句，但<code>select</code>关键字后需要给出多个列名且列名之间用逗号分隔。比如，想要从产品表（products）中检索产品号（prod_id），产品名（prod_name），产品价格（prod_price）信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_id, prod_name, prod_price       #输入</div><div class="line"><span class="keyword">from</span> products;</div><div class="line">+<span class="comment">---------+----------------+------------+   #输出</span></div><div class="line">| prod_id | prod_name      | prod_price |</div><div class="line">+<span class="comment">---------+----------------+------------+</span></div><div class="line">| ANV01   | .5 ton anvil   |       5.99 |</div><div class="line">| ANV02   | 1 ton anvil    |       9.99 |</div><div class="line">| ANV03   | 2 ton anvil    |      14.99 |</div><div class="line">| DTNTR   | Detonator      |      13.00 |</div><div class="line">| FB      | Bird seed      |      10.00 |</div><div class="line">| FC      | Carrots        |       2.50 |</div><div class="line">| FU1     | Fuses          |       3.42 |</div><div class="line">| JP1000  | JetPack 1000   |      35.00 |</div><div class="line">| JP2000  | JetPack 2000   |      55.00 |</div><div class="line">| OL1     | Oil can        |       8.99 |</div><div class="line">| SAFE    | Safe           |      50.00 |</div><div class="line">| SLING   | Sling          |       4.49 |</div><div class="line">| TNT1    | TNT (1 stick)  |       2.50 |</div><div class="line">| TNT2    | TNT (5 sticks) |      10.00 |</div><div class="line">+<span class="comment">---------+----------------+------------+</span></div><div class="line">14 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>注意，SQL语句一般返回原始、无格式的数据。数据展现的格式是一个表示问题，而不应包括在数据的检索中。</p><h4 id="1-3-检索所有列"><a href="#1-3-检索所有列" class="headerlink" title="1.3 检索所有列"></a>1.3 检索所有列</h4><p>　　要检索出一张表的所有列，同样使用上述相同的<code>select</code>语句，但不需要逐个列出表中的所有列。这可以采用<code>*</code>通配符来实现，事实上<code>*</code>通配符的好处在于你或许不知道所有列的列名，而通过它能检索出未知列。其语句如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from products;    #输入</div></pre></td></tr></table></figure><h4 id="如何实现检索不同的行？"><a href="#如何实现检索不同的行？" class="headerlink" title="如何实现检索不同的行？"></a>如何实现检索不同的行？</h4><p>　　如上述，<code>select</code>语句的结果返回被检索列的所有行，比如检索产品表（products）中供应商ID（vend_id）这一列，返回结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">select vend_id from products;   #输入</div><div class="line">+<span class="comment">---------+                     #输出 </span></div><div class="line">| vend_id |</div><div class="line">+<span class="comment">---------+</span></div><div class="line">|    1001 |</div><div class="line">|    1001 |</div><div class="line">|    1001 |</div><div class="line">|    1002 |</div><div class="line">|    1002 |</div><div class="line">|    1003 |</div><div class="line">|    1003 |</div><div class="line">|    1003 |</div><div class="line">|    1003 |</div><div class="line">|    1003 |</div><div class="line">|    1003 |</div><div class="line">|    1003 |</div><div class="line">|    1005 |</div><div class="line">|    1005 |</div><div class="line">+<span class="comment">---------+</span></div><div class="line">14 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</div></pre></td></tr></table></figure><p>虽然结果显示返回14行（因为products表中列出了14个产品），但是容易看到实际表中只有4个供应商，想要只返回列中的不同值需要用到<code>distinct</code>关键字，它指示Mysql只返回不同值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> vend_id     #输入</div><div class="line"><span class="keyword">from</span> products;</div><div class="line">+<span class="comment">---------+                 #输出 </span></div><div class="line">| vend_id |</div><div class="line">+<span class="comment">---------+</span></div><div class="line">|    1001 |</div><div class="line">|    1002 |</div><div class="line">|    1003 |</div><div class="line">|    1005 |</div><div class="line">+<span class="comment">---------+</span></div><div class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.05</span> sec)</div></pre></td></tr></table></figure><p>注意，<code>distinct</code>关键字应用于给出的所有列儿不仅仅只是前置它的列。</p><h4 id="如何限制输出？"><a href="#如何限制输出？" class="headerlink" title="如何限制输出？"></a>如何限制输出？</h4><p>　　或许在有些情况下，你只希望查看某一列的前几行，在<code>select</code>语句中家加入<code>limit</code>子句可以实现这一任务。下面给出两个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products  #输入</div><div class="line"><span class="keyword">limit</span> <span class="number">5</span>;</div><div class="line">+<span class="comment">--------------+                #输出 </span></div><div class="line">| prod_name    |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">| .5 ton anvil |</div><div class="line">| 1 ton anvil  |</div><div class="line">| 2 ton anvil  |</div><div class="line">| Detonator    |</div><div class="line">| Bird seed    |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>上述语句中，<code>limit 5</code>指示Mysql返回前5行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_name <span class="keyword">from</span> products  #输入</div><div class="line"><span class="keyword">limit</span> <span class="number">5</span>, <span class="number">5</span>;</div><div class="line">+<span class="comment">--------------+                #输出</span></div><div class="line">| prod_name    |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">| Carrots      |</div><div class="line">| Fuses        |</div><div class="line">| JetPack 1000 |</div><div class="line">| JetPack 2000 |</div><div class="line">| Oil can      |</div><div class="line">+<span class="comment">--------------+</span></div><div class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>上述语句可以得到下一个5行，<code>limit 5, 5</code>指示Mysql返回从行5开始的5行，其中第一个数表示开始位置，第二个数表示要检索的行数。注意此处的第一个参数为行的索引号而不是真实的行序号，实际上行的索引号比行序号要小1，即第1行为行0而不是行1。且要注意带一个值的<code>limit</code>总是从第一行开始，给出的数为返回的行数；而带两个值的<code>limit</code>是从第一个值的位置开始返回行，返回行数为第二个值。<code>limit</code>语句还有一种替代语法，例如<code>limit 5 offset 2</code>，它等同于<code>limit 2, 5</code>。</p><h2 id="2-排序检索数据"><a href="#2-排序检索数据" class="headerlink" title="2. 排序检索数据"></a>2. 排序检索数据</h2><p>　　在前一部分的数据检索中使用的<code>select</code>语句输出中可以看到，返回结果是没有特定顺序的。实际上，以此方式检索出的数据并非以纯粹的随机顺序显示。如果不进行排序，数据一般讲以它在底层表中出现的顺序显示，这可能是数据最开始添加到表中的顺序。但是，如果数据后来进行过更新或者删除，则此顺序会受到Mysql重用回收存储空间的影响，也就是说在没有明确控制顺序的情况下此输出结果的顺序是没有参考价值的。</p><ul><li><strong>子句</strong>（clause）： 一个子句通常由一个关键字和所提供的数据组成。一条完整的SQL语句可包含子句，有些子句是必须的（比如<code>select</code>语句中的<code>from</code>子句，通过它确定需要提取列所在的表），而有些子句是可选的。</li></ul><h4 id="2-1-排序数据"><a href="#2-1-排序数据" class="headerlink" title="2.1 排序数据"></a>2.1 排序数据</h4><p>　　为了对<code>select</code>语句检索出的数据进行排序，可以使用<code>order by</code>子句确定一个或多个列名，并据此对输出进行排序。注意，通常<code>order by</code>子句中所使用的列是<code>select</code>语句中选择的列，但也可以不是（即使用其他列对<code>select</code>语句中的列进行排序也是可以的）。下面是数据排序的一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_id, prod_price, prod_name          #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_price, prod_name</div><div class="line">+<span class="comment">---------+------------+----------------+      #输出</span></div><div class="line">| prod_id | prod_price | prod_name      |</div><div class="line">+<span class="comment">---------+------------+----------------+</span></div><div class="line">| FC      |       <span class="number">2.50</span> | Carrots        |</div><div class="line">| TNT1    |       <span class="number">2.50</span> | TNT (<span class="number">1</span> stick)  |</div><div class="line">| FU1     |       <span class="number">3.42</span> | Fuses          |</div><div class="line">| SLING   |       <span class="number">4.49</span> | Sling          |</div><div class="line">| ANV01   |       <span class="number">5.99</span> | <span class="number">.5</span> ton anvil   |</div><div class="line">| OL1     |       <span class="number">8.99</span> | Oil can        |</div><div class="line">| ANV02   |       <span class="number">9.99</span> | <span class="number">1</span> ton anvil    |</div><div class="line">| FB      |      <span class="number">10.00</span> | Bird <span class="keyword">seed</span>      |</div><div class="line">| TNT2    |      <span class="number">10.00</span> | TNT (<span class="number">5</span> sticks) |</div><div class="line">| DTNTR   |      <span class="number">13.00</span> | Detonator      |</div><div class="line">| ANV03   |      <span class="number">14.99</span> | <span class="number">2</span> ton anvil    |</div><div class="line">| JP1000  |      <span class="number">35.00</span> | JetPack <span class="number">1000</span>   |</div><div class="line">| <span class="keyword">SAFE</span>    |      <span class="number">50.00</span> | <span class="keyword">Safe</span>           |</div><div class="line">| JP2000  |      <span class="number">55.00</span> | JetPack <span class="number">2000</span>   |</div><div class="line">+<span class="comment">---------+------------+----------------+</span></div><div class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>此例是检索产品表中的产品ID，产品价格和产品名，并对输出结果按照产品价格和产品名进行排序（先按价格排序，再按名称排序）。注意，在按照多个列进行排序时，排序完全按照所规定的顺序进行（在本例中如果多个行具有相同的价格则咱其名称进行再排序）。</p><h4 id="2-2-指定排序的方向"><a href="#2-2-指定排序的方向" class="headerlink" title="2.2 指定排序的方向"></a>2.2 指定排序的方向</h4><p>　　数据排序不限于升序排序（这是默认的排序顺序），还可以通过在<code>order by</code>子句中指定<code>desc</code>关键字对输出结果进行降序排序。如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> prod_id, prod_price, prod_name          #输入</div><div class="line"><span class="keyword">from</span> products</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_price <span class="keyword">desc</span>;</div><div class="line">+<span class="comment">---------+------------+----------------+      #输出</span></div><div class="line">| prod_id | prod_price | prod_name      |</div><div class="line">+<span class="comment">---------+------------+----------------+</span></div><div class="line">| JP2000  |      55.00 | JetPack 2000   |</div><div class="line">| SAFE    |      50.00 | Safe           |</div><div class="line">| JP1000  |      35.00 | JetPack 1000   |</div><div class="line">| ANV03   |      14.99 | 2 ton anvil    |</div><div class="line">| DTNTR   |      13.00 | Detonator      |</div><div class="line">| FB      |      10.00 | Bird seed      |</div><div class="line">| TNT2    |      10.00 | TNT (5 sticks) |</div><div class="line">| ANV02   |       9.99 | 1 ton anvil    |</div><div class="line">| OL1     |       8.99 | Oil can        |</div><div class="line">| ANV01   |       5.99 | .5 ton anvil   |</div><div class="line">| SLING   |       4.49 | Sling          |</div><div class="line">| FU1     |       3.42 | Fuses          |</div><div class="line">| FC      |       2.50 | Carrots        |</div><div class="line">| TNT1    |       2.50 | TNT (1 stick)  |</div><div class="line">+<span class="comment">---------+------------+----------------+</span></div><div class="line">14 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>注意，<code>desc</code>关键字只应用到直接位于其前面的列名，位于其后的列名仍然按默认的升序。如果想在多个列上进行降序排序，需要对<code>order by</code>后的每个列名指定<code>desc</code>关键字。与<code>desc</code>关键字相反的是<code>asc</code>关键字，但升序是默认的排序方式，所以无需特别指定。</p><p>　　其次，要特别注意各个子句出现的次序（比如<code>order by</code>子句出现在<code>from</code>子句之后，而<code>limit</code>子句出现在<code>order by</code>子句之后），子句次序混乱将会报错。</p><h4 id="如何检索一列中最高或者最底的值？"><a href="#如何检索一列中最高或者最底的值？" class="headerlink" title="如何检索一列中最高或者最底的值？"></a>如何检索一列中最高或者最底的值？</h4><p>　　到目前为止<code>order by</code>以及<code>limit</code>子句可以帮助实现这一检索，have a try!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本节介绍数据的检索与排序，此操作将由&lt;code&gt;select&lt;/code&gt;语句及其子句&lt;code&gt;order by&lt;/code&gt;分别实现。要知道，SQL语句是由简单的英语单词构成，如&lt;code&gt;select&lt;/code&gt;，&lt;code&gt;create&lt;/code&gt;这些单词在SQL语言中被称为关键字。接触过SQL语言的小伙伴应该知道&lt;code&gt;select&lt;/code&gt;基本算是最常使用的SQL关键字了，它几乎就是SQL的象征，下面是&lt;code&gt;select&lt;/code&gt;的表演时间。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记（二）——连接服务器</title>
    <link href="http://prophetjeff.com/2017/11/14/mysql-2/"/>
    <id>http://prophetjeff.com/2017/11/14/mysql-2/</id>
    <published>2017-11-14T08:10:00.000Z</published>
    <updated>2017-11-14T10:05:32.567Z</updated>
    
    <content type="html"><![CDATA[<p>　　前一章节介绍了数据库基本概念，在有可使用的服务器和客户机软件之后，连接到数据库是执行后续操作的首要步骤。所有的图形化客户机软件都提供服务器连接窗口，本小白使用的是最原始的Mysql命令行实用程序，后续展现的代码也是基于该客户机工具。<br><a id="more"></a></p><h4 id="服务器连接"><a href="#服务器连接" class="headerlink" title="服务器连接"></a>服务器连接</h4><p>要连接到服务器需要知道其四个基本信息：主机名，端口，用户名以及口令。</p><ul><li><strong>主机名</strong>：也是计算机名，如果连接的是本地Mysql服务器则为localhost。</li><li><strong>端口</strong>：如果使用默认端口3306之外的端口需要提供其端口号。（在网络上，各主机通过TCP/IP协议进行数据交互，而主机上有多程序同时运行，要将数据准确传输到某个特定的程序就需要引入端口机制将各个程序与特定端口号对应，进而实现针对到程序间的数据交互。）</li><li><strong>用户名</strong></li><li><strong>用户名口令</strong>：就是对应的密码。</li></ul><p>在命令提示符下输入:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h localhost -u root -p *** -P 3306 #-h后跟主机名 -u后跟用户名 -p后跟口令 -P后跟端口号</div></pre></td></tr></table></figure><p>输入完成后会出现如下一个简单提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 3</div><div class="line">Server version: 5.7.19-log MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure><p>注意，如果连接本地服务器出现错误，请检查本地Mysql服务是否开启，或许需要手动开启服务。后续命令输入在<code>mysql&gt;</code>之后，命令用<code>；</code>结束，输入<code>quit</code>或<code>exit</code>退出Mysql命令行实用程序。</p><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><p>　　要知道，在最初连接到Mysql时，没有任何数据库打开供你使用，你需要选择一个数据库进而执行其他数据库操作。如果你不知道可以使用的数据库名，可以使用<code>show</code>关键字来显示数据库信息。下面是一个简单的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">show databases;          #输入</div><div class="line">+<span class="comment">--------------------+   #输出</span></div><div class="line">| Database           |</div><div class="line">+<span class="comment">--------------------+</span></div><div class="line">| information_schema |</div><div class="line">| cda1               |</div><div class="line">| crashcourse        |</div><div class="line">| mysql              |</div><div class="line">| performance_schema |</div><div class="line">| sys                |</div><div class="line">+<span class="comment">--------------------+</span></div><div class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</div></pre></td></tr></table></figure><p>此处返回一个数据库列表，列表中是Mysql内部可能使用的数据库。下一步选择你想进入的数据库，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use crashcourse;        #输入</div><div class="line">Database changed        #输出</div></pre></td></tr></table></figure><p>注意，<code>use</code>语句不返回任何结果，依赖于使用的客户机软件，显示某种形式的通知。必须先使用<code>use</code>语句打开数据库才能读取其中的数据。</p><h4 id="关于show语句"><a href="#关于show语句" class="headerlink" title="关于show语句"></a>关于show语句</h4><p>　　更多的<code>show</code>语句可以在Mysql命令行实用程序中，执行<code>help show;</code>进行查看，此处列出两个常用<code>show</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">show tables;                  #输入</div><div class="line">+<span class="comment">-----------------------+     #输出</span></div><div class="line">| Tables_in_crashcourse |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| customers             |</div><div class="line">| orderitems            |</div><div class="line">| orders                |</div><div class="line">| productnotes          |</div><div class="line">| products              |</div><div class="line">| vendors               |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure><p>注意，<code>show tables;</code>返回正在使用的数据库内的表的列表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">show columns from products;                                    #输入</div><div class="line">+<span class="comment">------------+--------------+------+-----+---------+-------+   #输出</span></div><div class="line">| Field      | Type         | Null | Key | Default | Extra |</div><div class="line">+<span class="comment">------------+--------------+------+-----+---------+-------+</span></div><div class="line">| prod_id    | char(10)     | NO   | PRI | NULL    |       |</div><div class="line">| vend_id    | int(11)      | NO   | MUL | NULL    |       |</div><div class="line">| prod_name  | char(255)    | NO   |     | NULL    |       |</div><div class="line">| prod_price | decimal(8,2) | NO   |     | NULL    |       |</div><div class="line">| prod_desc  | text         | YES  |     | NULL    |       |</div><div class="line">+<span class="comment">------------+--------------+------+-----+---------+-------+</span></div><div class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.12</span> sec)</div></pre></td></tr></table></figure><p>注意，<code>show columns</code>语句要求指定一个数据库内的表名，此例中使用的是products表，它对每个表中的每个字段返回一行（包含了各行数据类型，允许空值与否，主外键，默认值及额外信息）。<code>show columns</code>还有一种快捷方式，使用<code>describe products</code>会返回如上相同的结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　前一章节介绍了数据库基本概念，在有可使用的服务器和客户机软件之后，连接到数据库是执行后续操作的首要步骤。所有的图形化客户机软件都提供服务器连接窗口，本小白使用的是最原始的Mysql命令行实用程序，后续展现的代码也是基于该客户机工具。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记（一）——数据库基础概念</title>
    <link href="http://prophetjeff.com/2017/11/13/mysql-1/"/>
    <id>http://prophetjeff.com/2017/11/13/mysql-1/</id>
    <published>2017-11-13T09:55:00.000Z</published>
    <updated>2017-11-13T09:55:14.622Z</updated>
    
    <content type="html"><![CDATA[<p>　　在写这篇文章之前，我只花了一小段时间大致对《Mysql必知必会》这本小册子翻看了一遍。作为新入坑小白的我知道使用数据库是每位数据科学相关工作者的必备技能，在深入学习之前，理解关于它的基本概念及术语对后续的学习会有很大的帮助。<br><a id="more"></a><br>　　那么，初步接触数据库的第一个问题，十有八九，为什么要学习数据库或者数据有什么用？像这样的问题，作为数学和统计专业出身的我只会微微一笑，当然，数据库毕竟不是单纯的理论。给大家举个例子，假设各位看官开了一家书店，那么如何摆放书籍便于你自己还有前来买书的人搜寻就是一个需要解决的难题。如果说你的书店只卖两本书，那或许考虑怎么摆书是徒劳无功的，但如果你的书店有两万本各不相同书呢？现实情况往往更类似于后者。这样，你就需要将书进行分类以及整理，不同的店家有不同的方法，但需要告诉别人整理摆放的规则使所有的人都能按需检索。现今，有许多企业都拥有非常大规模的数据，虽然它们分别属于不同的行业，但都同样面临管理数据的问题，而数据库技术就能帮助解决这一难题。</p><p>　　要知道其实生活中，我们一直都在使用数据库，比如利用搜索引擎检索、查询自己的银行账户余额等等。数据库技术针对于数据管理，是计算机科学的重要分支。但由于一些原因，不同的人会使用相同的数据库术语表示不同的事物，所以对于本对其就不清楚的小白来说更加混乱。下面，我将列出一些数据库术语并加以说明。</p><h4 id="基本术语："><a href="#基本术语：" class="headerlink" title="基本术语："></a>基本术语：</h4><ul><li><strong>数据库</strong>（Database, DB）：数据库是指一种可共享的，以某种有组织的方式存储在计算机内的数据集合。（简单理解，可以将其想象为是保存有组织数据的容器，比如一个文件夹，是存放数据的物理位置。）</li><li><strong>数据库管理系统</strong>（Database Management System, DBMS）:数据库软件也称为DBMS，通过它我们可以创建和操纵数据库。（通常会看到一些人使用数据库这个术语来代表他们使用的数据库软件，但这是不正确的而且容易引起混淆，因为一般来说我们并不直接访问数据库而是通过DBMS。）</li></ul><p><img src="http://oytj0divs.bkt.clouddn.com/mysql-1.png" alt=""></p><ul><li><strong>SQL</strong>（Structrued Query Language）:结构化查询语言，是一种专门用来与数据库通信的语言。（几乎所有DBMS都支持SQL，它不是由某个特定数据库供应商专有的，但也并非所有语句都是可移植于不同DBMS。）</li><li><strong>表</strong>（table）:某种特定类型数据的结构化清单。（比如，想要将数据放进文件夹，首先需要在其中创建文件，然后将相关的数据放入特定的文件中。可以将数据库中的表想象成这里的文件，表是一种结构化的文件，用来存储某种特定类型的数据，每个表都有一个自己的名字。）</li><li><strong>模式</strong>（schema）:是关于表和数据库信息的特性和结构的信息。（每个表都有一定的特性，这些特性决定了数据在各个表中如何存储，用于描述表的这组信息以及数据库中各个表之间的关系即为模式。）</li><li><strong>列</strong>（column）:表中的一个字段。（表由列组成，每一列都存储着一条特定的信息。比如客户信息表中，客户编号、姓名、住址分别记录于各个列中。将数据有效的分解为多个列是有非常必要的，否则在排序和过滤时会非常困难。）</li><li><strong>行</strong>（row）:表中的一个记录。（例如，客户信息表中每行存储着一个客户。行和记录这两个术语可以互相替代，但从技术层面讲，行才是正确的术语。）</li><li><strong>主键</strong>（primary key）:一列或一组列，其值可以唯一区分表中的每个行。（例如客户信息表中，可用客户编号列作为主键。若没有主键，更新或删除表中特定行将变得困难，因为没有安全的方法保证只涉及相关的行。）</li></ul><h4 id="关于Mysql"><a href="#关于Mysql" class="headerlink" title="关于Mysql"></a>关于Mysql</h4><p>　　前文说到了数据库管理系统，数据的管理、处理实际都是由数据库软件，即DBMS完成的。而Mysql就是DBMS的一种，知名的DBMS还有Oracle,SQL Server,DB2等等。至于为什么选Mysql，见仁见智，首先Mysql是开源的，就好像SAS和R一样（你买得起吗你就学SAS？你的公司买SAS了吗你就学？。。。开源万岁！）。其次，Mysql的使用非常广泛，一些知名企业也使用Mysql来管理自己的数据，它执行快且容易安装和使用。</p><p>　　DBMS可分为两类：一种是共享文件系统的DBMS，一种是基于客户机-服务器的DBMS。前者用于桌面用途，通常不用于高端应用。Mysql即是基于客户机-服务器的DBMS。服务器是负责所有数据访问和处理的一个软件，这个软件运行在称为数据库服务器的计算机上，关于数据添加、删除、更新等请求都由服务器软件来完成。而这些请求来自于运行客户机软件的计算机，它直接和用户交互。比如，你请求检索某数据库中某张表的一个字段，则客户机软件通过网络提交请求给服务器软件，服务器软件处理这个请求并将结果反馈至客户机。（注意：客户机和服务器软件可以安装在不同或同一台计算机上，但要和数据库交互，客户机都要和服务器进行通信。）</p><ul><li>服务器软件为Mysql DBMS。可以在本地安装的副本上运行，也可以连接到运行在你具有访问权限的远程服务器上的副本。</li><li>客户机软件是Mysql提供的工具，如Workbench等。</li></ul><p>　　本菜鸟目前用的是mysql命令行实用程序以及Workbench。前者没有下拉菜单，用户界面及鼠标支持，但它是Mysql核心安装的一部分，简单实用，只需在操作系统命令提示符下输入简单语句即可进入。至于类似Workbench这类图形交互客户机软件有很多，不同人根据自己习惯喜好不同可自行选择，由于我也只用过Workbench就不瞎推荐了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　在写这篇文章之前，我只花了一小段时间大致对《Mysql必知必会》这本小册子翻看了一遍。作为新入坑小白的我知道使用数据库是每位数据科学相关工作者的必备技能，在深入学习之前，理解关于它的基本概念及术语对后续的学习会有很大的帮助。&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://prophetjeff.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://prophetjeff.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>一首令人窒息的诗歌</title>
    <link href="http://prophetjeff.com/2017/11/07/poetry/"/>
    <id>http://prophetjeff.com/2017/11/07/poetry/</id>
    <published>2017-11-07T03:07:11.000Z</published>
    <updated>2017-11-08T02:40:35.604Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oytj0divs.bkt.clouddn.com/59954a7a7af67.jpg" alt="poetry"><br><blockquote class="blockquote-center"><h1 id="短歌行"><a href="#短歌行" class="headerlink" title="短歌行"></a>短歌行</h1><h4 id="曹操"><a href="#曹操" class="headerlink" title="曹操"></a>曹操</h4><p>对酒当歌，人生几何！譬如朝露，去日苦多。<br><a id="more"></a><br>慨当以慷，忧思难忘。何以解忧？唯有杜康。</p><p>青青子衿，悠悠我心。但为君故，沉吟至今。</p><p>呦呦鹿鸣，食野之苹。我有嘉宾，鼓瑟吹笙。</p><p>明明如月，何时可掇？忧从中来，不可断绝。</p><p>越陌度阡，枉用相存。契阔谈讌，心念旧恩。</p><p>月明星稀，乌鹊南飞。绕树三匝，何枝可依？</p><p>山不厌高，海不厌深。周公吐哺，天下归心。</p></blockquote></p><hr><p>　　《短歌行》是汉乐府的旧题，属于《相和歌辞·平调曲》。这就是说它本来是一个乐曲的名称。最初的古辞已经失传。乐府里收集的同名有24首，最早的是曹操的这首。这种乐曲怎么唱法，现在当然是不知道了。但乐府《相和歌·平调曲》中除了《短歌行》还有《长歌行》，唐代吴兢《乐府古题要解》引证古诗“长歌正激烈”，魏文帝曹丕《燕歌行》“短歌微吟不能长”和晋代傅玄《艳歌行》“咄来长歌续短歌”等句，认为“长歌”、“短歌”是指“歌声有长短”。现在也就只能根据这一点点材料来理解《短歌行》的音乐特点。《短歌行》这个乐曲，原来当然也有相应的歌辞，就是“乐府古辞”，但这古辞已经失传了。现在所能见到的最早的《短歌行》就是曹操所作的拟乐府《短歌行》。所谓“拟乐府”就是运用乐府旧曲来补作新词，曹操传世的《短歌行》共有两首，这里要介绍的是其中的第一首。</p><p>　　这首《短歌行》的主题非常明确，就是作者希望有大量人才来为自己所用。曹操在其政治活动中，为了扩大他在庶族地主中的统治基础，打击反动的世袭豪强势力，曾大力强调“唯才是举”，为此而先后发布了“求贤令”、“举士令”、“求逸才令”等；而《短歌行》实际上就是一曲“求贤歌”、又正因为运用了诗歌的形式，含有丰富的抒情成分，所以就能起到独特的感染作用，有力地宣传了他所坚持的主张，配合了他所颁发的政令。正像曹操的其它诗作如《蒿里行》、《对酒》、《苦寒行》等一样，是政治性很强的诗作，主要是为曹操当时所实行的政治路线和政治策略服务的；然而它那政治内容和意义却完全熔铸在浓郁的抒情意境之中，全诗充分发挥了诗歌创作的特长，准确而巧妙地运用了比兴手法，来达到寓理于情，以情感人的目的。在曹操的时代，他就已经能够按照抒情诗的特殊规律来取得预期的社会效果，这一创作经验显然是值得借鉴的。同时因为曹操在当时强调“唯才是举”有一定的进步意义，所以他对“求贤”这一主题所作的高度艺术化的表现，也应得到历史的肯定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oytj0divs.bkt.clouddn.com/59954a7a7af67.jpg&quot; alt=&quot;poetry&quot;&gt;&lt;br&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h1 id=&quot;短歌行&quot;&gt;&lt;a href=&quot;#短歌行&quot; class=&quot;headerlink&quot; title=&quot;短歌行&quot;&gt;&lt;/a&gt;短歌行&lt;/h1&gt;&lt;h4 id=&quot;曹操&quot;&gt;&lt;a href=&quot;#曹操&quot; class=&quot;headerlink&quot; title=&quot;曹操&quot;&gt;&lt;/a&gt;曹操&lt;/h4&gt;&lt;p&gt;对酒当歌，人生几何！譬如朝露，去日苦多。&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://prophetjeff.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="poetry" scheme="http://prophetjeff.com/tags/poetry/"/>
    
  </entry>
  
</feed>
