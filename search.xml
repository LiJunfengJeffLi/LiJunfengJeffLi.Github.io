<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mysql学习笔记（四）——数据过滤]]></title>
    <url>%2F2017%2F11%2F16%2Fmysql-4%2F</url>
    <content type="text"><![CDATA[数据库表包含了大量的数据，通常我们并不期望检索表中的所有行。正如在上一章节中采用limit子句实现结果限定一样，更一般地，我们希望准确检索到表中的特定数据（即表中数据的子集）。这需要在select语句检索中指定搜索条件来完成，搜索条件也称为过滤条件。本章节通过介绍select语句中的where子句，通配符以及正则表达式来实现数据过滤。 1. 使用WHERE子句过滤数据 在select语句中，数据根据where子句中指定的搜索条件进行过滤。注意使用多个子句时的次序，如果出现order by子句，那么where子句需要使用在前者之前，否则将会报错。 1.1 WHERE子句条件操作符 首先来看一个例子： 12345678910select prod_name, prod_price #输入from productswhere prod_price = 2.5;+---------------+------------+ #输出| prod_name | prod_price |+---------------+------------+| Carrots | 2.50 || TNT (1 stick) | 2.50 |+---------------+------------+2 rows in set (0.01 sec) 上述语句表示从products表中检索两个列，但不返回其所有行而是返回prod_price等于2.5的行。这个例子采用简单的相等搜索条件，它检查一个列是否具有指定的值，并据此进行过滤，但是SQL能够实现不只如此。下面列出了更多WHERE子句操作符： 操作符 说明 操作符 说明 = 等于 &lt;&gt; 不等于 &lt; 小于 != 不等于 &gt; 大于 &lt;= 小于等于 &gt;= 大于等于 between 在指定两个值之间 注意，需要使用单引号来限定字符串，如果将值与串类型的列进行比较则需要限定引号，而与数值比较时不需要。下例使用了BETWEEN操作符，其语法与其他WHERE子句操作符略有不同，它需要提供两个值（即范围的起始值和结束值）并使用and关键连接，BETWEEN则匹配该范围中的所有值包括端点值。 12345678910111213select prod_name, prod_price #输入from productswhere prod_price between 5 and 10;+----------------+------------+ #输出| prod_name | prod_price |+----------------+------------+| .5 ton anvil | 5.99 || 1 ton anvil | 9.99 || Bird seed | 10.00 || Oil can | 8.99 || TNT (5 sticks) | 10.00 |+----------------+------------+5 rows in set (0.01 sec) 如何进行空值检查？ 在创建表时，设计人员可以指定其中的列是否可以不包含值。一个列不包含值时，称其为包含空值NULL。要注意，空值与字段包含0、空字符串、空格不同。select语句中有一条特殊的where子句，可以实现检索具有空值的列，如下例： 1234select prod_name #输入from productswhere prod_price is null;Empty set (0.00 sec) #输出 这条语句返回没有价格（空prod_price字段，非价格为0）的所有产品，由于表中没有这样的行，所以没有返回数据。注意，在通过筛选不具有特定值（&lt;&gt;条件操作符）的行时，可能希望返回具有NULL值的行，但是实际上未知是有特定含义的，数据库不知道它们是否匹配所以不会返回NULL值，需要进行进一步验证。 组合WHERE子句 上述介绍的所有where子句在过滤数据时使用的都是单一的条件，实际中往往需要通过多个where子句建立更强更高级的搜索条件。Mysql可以通过and和or操作符连接多条where子句。如下例： 12345678910111213select prod_id, prod_price, prod_name #输入from productswhere vend_id = 1003 and prod_price &lt;= 10;+---------+------------+----------------+ #输出| prod_id | prod_price | prod_name |+---------+------------+----------------+| FB | 10.00 | Bird seed || FC | 2.50 | Carrots || SLING | 4.49 | Sling || TNT1 | 2.50 | TNT (1 stick) || TNT2 | 10.00 | TNT (5 sticks) |+---------+------------+----------------+5 rows in set (0.00 sec) 上述语句检索供应商ID为1003且价格小于等于10美元的所有产品，and关键字用在where子句中可检索同时满足给定条件的行。当然，可以将更多过滤条件组合在一起，但每添加一条就需要再加一个关键字。 类似地，or操作符用在where子句中可检索满足任一给定条件的行。需要特别注意的是，where子句可包含任意数目的and和or操作符，两者结合可以实现更复杂的检索。但组合and和or会面临一个问题——处理次序。SQL在处理or操作符前会优先处理and操作符，即and的优先级更高。为了避免出现歧义和错误，可以使用圆括号对操作符进行明确的分组，而不应该过分依赖默认次序。 WHERE子句中的IN操作符和NOT操作符 in：in操作符用来指定条件范围，范围中的每个条件都可以进行匹配。 not：not操作符是用来否定后跟条件的关键字。 1234567891011121314select prod_name, prod_price #输入from productswhere vend_id not in (1002,1003)order by prod_name;+--------------+------------+ #输出| prod_name | prod_price |+--------------+------------+| .5 ton anvil | 5.99 || 1 ton anvil | 9.99 || 2 ton anvil | 14.99 || JetPack 1000 | 35.00 || JetPack 2000 | 55.00 |+--------------+------------+5 rows in set (0.00 sec) 要注意，此处的(1002,1003)并非代表一个区间，而是包含1002及1003这两个元素的集合。区间的表示是使用between操作符。 上例语句检索了非1002及1003供应商的所有产品及其价格，并按照产品名进行排序。可以看出，in操作符的功能与or功能非常相似，实际上，在使用多个过滤条件时in操作符更加清楚直观执行更快（因为它使用的操作符更少）。in操作符的最大优点在于它可以包含其他select语句（子查询），在后续的章节中会对它进行介绍。同样地，not关键字可以简化更加复杂的多个过滤条件，提高效率。 2. 使用通配符进行过滤 前文介绍的所有操作符都是针对已知值进行过滤的，但有的时候我们对自己要检索的数据了解得并不是那么全面或者说清楚。比如，如何检索在产品名中包含文本“jet”的所有产品？显然，前文提供的方法都行不通，因为我们不清楚自己要检索的产品名称具体是什么，这时，我们需要使用通配符创建特定的搜索模式。 在搜索子句中要使用通配符，必须使用like操作符。like指示Mysql后跟的搜索模式利用通配符匹配，而不是直接相等匹配进行比较。 通配符（wildcard）：用来匹配值的一部分的特殊字符。 搜索模式（search pattern）：由字面值、通配符或两者组合构成的搜索条件。 谓词（predicate）：操作符何时不是操作符？答案是在它作为谓词时。（从技术上说，like是谓词而不是操作符，虽然最终的结果是相同的，但需要对此术语进行了解，以免在SQL文档中遇到此术语时不知道）。 2.1 百分号（%）通配符 最常使用的通配符是百分号（%）。在搜索中，%表示任何字符出现任意次数。例如，为了找出所有产品名以“jet”起始的产品，可以使用如下select语句： 12345678910select prod_id, prod_name #输入from productswhere prod_name like 'jet%';+---------+--------------+ #输出| prod_id | prod_name |+---------+--------------+| JP1000 | JetPack 1000 || JP2000 | JetPack 2000 |+---------+--------------+2 rows in set (0.00 sec) 此例使用的搜索模式为’jet%’，在执行这条子句时将检索任意以“jet”起头的词。%告诉Mysql接受“jet”之后的任意字符。注意，通配符可以在搜索模式中任意位置中使用，并且可以使用多个通配符。如下例： 123select prod_id, prod_name #输入from productswhere prod_name like '%anvil%' #表示匹配任何位置包含文本anvil的值 注意，%代表搜索模式中给定位置的0个，1个或多个字符（NULL除外，即like &#39;%&#39;也不能匹配NULL值，而空格不是空值是字符不要疏忽）。 2.2 下划线（_）通配符 下划线通配符与百分号通配符用途基本一致，但是下划线只匹配单个字符而不是多个。如下例： 12345678910select prod_id, prod_name #输入from productswhere prod_name like '_ ton anvil';+---------+-------------+ #输出| prod_id | prod_name |+---------+-------------+| ANV02 | 1 ton anvil || ANV03 | 2 ton anvil |+---------+-------------+2 rows in set (0.00 sec) 正如上述，Mysql通配符功能强大，但是这种共也是有代价的，使用通配符的检索处理往往比其他检索花的时间更长。因此，不要过度使用通配符（如果其他操作符能达到相同目的尽量使用其他操作符）。除非绝对必要，尽量不要讲通配符置于开始处，这样检索起来是最慢的。其次，要特别注意通配符的位置，如果位置错误可能不会返回你想要的数据。 3. 使用正则表达式进行检索 对于基本的检索和过滤，前文使用的匹配、比较和通配符基本可以实现。但如果过滤条件更加复杂，比如从文本块中提取电话号码，找到重复单词等等目标，仅仅采用前文方法就不足以实现。正则表达式是通过正则表达式语言来建立，可以完成上述及更广泛目标（匹配文本）的特殊语言。Mysql用where子句对正则表达式提供了初步支持（Mysql仅支持多数正则表达式实现的一个很小的子集），允许指定正则表达式来过滤select语句检索出的数据。 3.1 基本字符匹配 首先来看下面这个例子： 1234567891011select prod_name #输入from productswhere prod_name regexp '.000'order by prod_name;+--------------+ #输出| prod_name |+--------------+| JetPack 1000 || JetPack 2000 |+--------------+2 rows in set (0.00 sec) 这里使用了正则表达式&#39;.000&#39;。其中.是正则表达式语言中的一个特殊字符，它表示匹配任意一个字符。regexp关键字告诉Mysql后跟的东西作为正则表达式处理。当然，这个特殊的例子也可以通过like关键字和通配符来完成。注意，like和regexp的区别，like匹配整个列（如果不使用通配符来帮助的话），而regexp在列值内进行匹配。Mysql中的正则表达式不区分大小写，若要区分可使用binary关键字，如where prod_name regexp binary &#39;JetPack .000&#39;。 3.2 进行OR匹配 见下面这个例子： 1234567891011select prod_name #输入from productswhere prod_name regexp '1000|2000|3000'order by prod_name;+--------------+ #输出| prod_name |+--------------+| JetPack 1000 || JetPack 2000 |+--------------+2 rows in set (0.00 sec) |是正则表达式中的OR操作符，它表示匹配其中之一。 3.3 匹配几个字符之一 要匹配特定的字符，可以使用一组被[和]括起来 字符来完成。如下例： 1234567891011select prod_name #输入from productswhere prod_name regexp '[123] ton'order by prod_name;+-------------+ #输出| prod_name |+-------------+| 1 ton anvil || 2 ton anvil |+-------------+2 rows in set (0.00 sec) 这里，[123]定义一组字符，它的意思是匹配1或2或3。正如所见，[]是另一种形式的OR语句，它是[1|2|3] ton的缩写，也可以使用后者。至于为和需要用[]来定义OR语句要查找什么，各位可以自己试一试去掉[]会发生什么。注意，字符集合也可以被否定（即，它们将匹配除指定字符外的任何东西，这一目的通过在[]内开始处放置一个^来完成，如[^123]）。 3.4 匹配范围 集合可以用来定义要匹配的一个或多个字符，比如[123456789]。但显然，当字符元素过多时，使用这种表达将会变得麻烦而且容易出错。可以使用-来定义一个范围，达到简化集合的作用，如下例： 1234567891011select prod_name #输入from productswhere prod_name regexp '[1-3] ton'order by prod_name;+-------------+ #输出| prod_name |+-------------+| 1 ton anvil || 2 ton anvil |+-------------+2 rows in set (0.00 sec) 注意，范围不一定只可以是数值的，比如[a-z]匹配任意字母字符。 3.5 匹配特殊字符 此处所说的特殊字符是正则表示语言中使用过的字符，比如要匹配文本中的“.”，而.在正则表达式中有特殊含义，因此此处需要使用转义（由\\来引导），如下例： 12345678910select vend_name #输入from vendorswhere vend_name regexp '\\.'order by vend_name;+--------------+ #输出| vend_name |+--------------+| Furball Inc. |+--------------+1 row in set (0.01 sec) 3.6 匹配字符类 实际中会遇到检索自己常使用的数字、所有字母字符或所有数字字母字符等的匹配。为了方便起见，可以使用预定的字符集，称为字符类（character class）。见下表： 类 说明 [:alnum:] 任意数字和字母（同[a-zA-Z0-9]） [:alpha:] 任意字符（同[a-zA-Z]） [:blank:] 空格和制表（同[\\t]） [:cntrl:] ASCII控制字符（ASCII0到31和127） [:digit:] 任意数字（同[0-9]） [:graph:] 与[:print:]相同但不包括空格 [:lower:] 任意小写字母（同[a-z]） [:print:] 任意可打印字符 [:punct:] 既不在[:alnum:]又不在[:cntrl:]中的任意字符 [:space:] 包括空格在内的任意空白字符（同[\\f\\n\\r\\t\\v]） [:upper:] 任意大写字母（同[A-Z]） [:xdigit:] 任意十六进制数字（同[a-fA-F0-9]） 3.7 匹配多个实例 目前使用的所用正则表达式都试图匹配单词出现，有时候，需要的检索对匹配的数目控制更强。例如，想要搜寻所有的数，不管包含都少个数字，或者寻找一个单词且还能够适应一个尾随的s（如果存在）等等。这可以通过正则表达式的重复元字符来完成。下面是正则表达式重复元字符表: 元字符 说明 * 0个或多个匹配 + 1个或多个匹配 ? 0个或1个匹配 {n} 指定数目的匹配 {n,} 不少于指定数目的匹配 {n,m} 匹配数目的范围（m不超过225） 下面是一个使用重复元字符的例子： 1234567891011select prod_name #输入from productswhere prod_name regexp '\\([0-9] sticks?\\)' #？使其前一个字母s可选order by prod_name;+----------------+ #输出| prod_name |+----------------+| TNT (1 stick) || TNT (5 sticks) |+----------------+2 rows in set (0.00 sec) 3.8 定位符 前述所有例子都是匹配一个串中任意位置的文本，想要匹配特定位置的文本需要使用下表列出的定位符： 定位元字符 说明 ^ 文本的开始 $ 文本的结尾 [[:&lt;:]] 词的开始 [[:&gt;:]] 词的结尾 例如，若想找出一个数（包括以一个小数点开始的数）开头的所有产品名： 123456789101112select prod_name #输入from productswhere prod_name regexp '^[0-9\\.]'order by prod_name;+--------------+ #输出| prod_name |+--------------+| .5 ton anvil || 1 ton anvil || 2 ton anvil |+--------------+3 rows in set (0.00 sec) 注意，^有双重用途，在集合中（由[和]定义）它用于否定该集合；否则，它用来指串的开始处。 如何测试正则表达式？ 实际中可以在不使用数据库表的情况下用select来测试正则表达式，此时，regexp总是返回0（没有匹配）或1（匹配）。例如select &#39;hello&#39; regexp &#39;[0-9]&#39;;，这个例子返回的结果是0。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>通配符</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql学习笔记（三）——数据检索与排序]]></title>
    <url>%2F2017%2F11%2F15%2Fmysql-3%2F</url>
    <content type="text"><![CDATA[本节介绍数据的检索与排序，此操作将由select语句及其子句order by分别实现。要知道，SQL语句是由简单的英语单词构成，如select，create这些单词在SQL语言中被称为关键字。接触过SQL语言的小伙伴应该知道select基本算是最常使用的SQL关键字了，它几乎就是SQL的象征，下面是select的表演时间。 1. 检索数据 首先，select语句的用途是从一个或多个表中检索信息，而要使用其来检索表数据至少需要给出两条信息：一是想检索的是什么，二是从什么地方进行检索（比如你要检索的信息来自哪张表）。 1.1 检索单个列 比如，想从产品表（products）中检索产品名对应的列（prod_name）,需要select语句后接列名，并使用from关键字指出存放该数据的表。 123456789101112131415161718192021select prod_name #输入from products; +----------------+ #输出| prod_name |+----------------+| .5 ton anvil || 1 ton anvil || 2 ton anvil || Detonator || Bird seed || Carrots || Fuses || JetPack 1000 || JetPack 2000 || Oil can || Safe || Sling || TNT (1 stick) || TNT (5 sticks) |+----------------+14 rows in set (0.05 sec) 上述select语句返回products表中prod_name这一列的所有行，且没有经过排序（也就是说重复上述语句输出的结果顺序可能不一致，要知道没有经过排序而考察顺序是毫无意义的，只要行数一致就是正常的）。 注意，SQL关键字不区分大小写。在处理SQL语句时其中的空格都将被忽略，即SQL语句可以在一行给出也可以进行分行（分行会使语句更容易阅读和调试）。多条语句间必须使用;加以分割，在多数的DBMS中，单条语句后;可加可不加，但是如果使用的是mysql命令行实用程序，必须加上;来结束SQL语句。 1.2 检索多个列 如果想要从一张表上检索多个列，也采用与上述相同的select语句，但select关键字后需要给出多个列名且列名之间用逗号分隔。比如，想要从产品表（products）中检索产品号（prod_id），产品名（prod_name），产品价格（prod_price）信息。 123456789101112131415161718192021select prod_id, prod_name, prod_price #输入from products;+---------+----------------+------------+ #输出| prod_id | prod_name | prod_price |+---------+----------------+------------+| ANV01 | .5 ton anvil | 5.99 || ANV02 | 1 ton anvil | 9.99 || ANV03 | 2 ton anvil | 14.99 || DTNTR | Detonator | 13.00 || FB | Bird seed | 10.00 || FC | Carrots | 2.50 || FU1 | Fuses | 3.42 || JP1000 | JetPack 1000 | 35.00 || JP2000 | JetPack 2000 | 55.00 || OL1 | Oil can | 8.99 || SAFE | Safe | 50.00 || SLING | Sling | 4.49 || TNT1 | TNT (1 stick) | 2.50 || TNT2 | TNT (5 sticks) | 10.00 |+---------+----------------+------------+14 rows in set (0.00 sec) 注意，SQL语句一般返回原始、无格式的数据。数据展现的格式是一个表示问题，而不应包括在数据的检索中。 1.3 检索所有列 要检索出一张表的所有列，同样使用上述相同的select语句，但不需要逐个列出表中的所有列。这可以采用*通配符来实现，事实上*通配符的好处在于你或许不知道所有列的列名，而通过它能检索出未知列。其语句如下： 1select * from products; #输入 如何实现检索不同的行？ 如上述，select语句的结果返回被检索列的所有行，比如检索产品表（products）中供应商ID（vend_id）这一列，返回结果： 1234567891011121314151617181920select vend_id from products; #输入+---------+ #输出 | vend_id |+---------+| 1001 || 1001 || 1001 || 1002 || 1002 || 1003 || 1003 || 1003 || 1003 || 1003 || 1003 || 1003 || 1005 || 1005 |+---------+14 rows in set (0.02 sec) 虽然结果显示返回14行（因为products表中列出了14个产品），但是容易看到实际表中只有4个供应商，想要只返回列中的不同值需要用到distinct关键字，它指示Mysql只返回不同值。 1234567891011select distinct vend_id #输入from products;+---------+ #输出 | vend_id |+---------+| 1001 || 1002 || 1003 || 1005 |+---------+4 rows in set (0.05 sec) 注意，distinct关键字应用于给出的所有列儿不仅仅只是前置它的列。 如何限制输出？ 或许在有些情况下，你只希望查看某一列的前几行，在select语句中家加入limit子句可以实现这一任务。下面给出两个例子： 123456789101112select prod_name from products #输入limit 5;+--------------+ #输出 | prod_name |+--------------+| .5 ton anvil || 1 ton anvil || 2 ton anvil || Detonator || Bird seed |+--------------+5 rows in set (0.00 sec) 上述语句中，limit 5指示Mysql返回前5行。 123456789101112select prod_name from products #输入limit 5, 5;+--------------+ #输出| prod_name |+--------------+| Carrots || Fuses || JetPack 1000 || JetPack 2000 || Oil can |+--------------+5 rows in set (0.00 sec) 上述语句可以得到下一个5行，limit 5, 5指示Mysql返回从行5开始的5行，其中第一个数表示开始位置，第二个数表示要检索的行数。注意此处的第一个参数为行的索引号而不是真实的行序号，实际上行的索引号比行序号要小1，即第1行为行0而不是行1。且要注意带一个值的limit总是从第一行开始，给出的数为返回的行数；而带两个值的limit是从第一个值的位置开始返回行，返回行数为第二个值。limit语句还有一种替代语法，例如limit 5 offset 2，它等同于limit 2, 5。 2. 排序检索数据 在前一部分的数据检索中使用的select语句输出中可以看到，返回结果是没有特定顺序的。实际上，以此方式检索出的数据并非以纯粹的随机顺序显示。如果不进行排序，数据一般讲以它在底层表中出现的顺序显示，这可能是数据最开始添加到表中的顺序。但是，如果数据后来进行过更新或者删除，则此顺序会受到Mysql重用回收存储空间的影响，也就是说在没有明确控制顺序的情况下此输出结果的顺序是没有参考价值的。 子句（clause）： 一个子句通常由一个关键字和所提供的数据组成。一条完整的SQL语句可包含子句，有些子句是必须的（比如select语句中的from子句，通过它确定需要提取列所在的表），而有些子句是可选的。 2.1 排序数据 为了对select语句检索出的数据进行排序，可以使用order by子句确定一个或多个列名，并据此对输出进行排序。注意，通常order by子句中所使用的列是select语句中选择的列，但也可以不是（即使用其他列对select语句中的列进行排序也是可以的）。下面是数据排序的一个例子： 12345678910111213141516171819202122select prod_id, prod_price, prod_name #输入from productsorder by prod_price, prod_name+---------+------------+----------------+ #输出| prod_id | prod_price | prod_name |+---------+------------+----------------+| FC | 2.50 | Carrots || TNT1 | 2.50 | TNT (1 stick) || FU1 | 3.42 | Fuses || SLING | 4.49 | Sling || ANV01 | 5.99 | .5 ton anvil || OL1 | 8.99 | Oil can || ANV02 | 9.99 | 1 ton anvil || FB | 10.00 | Bird seed || TNT2 | 10.00 | TNT (5 sticks) || DTNTR | 13.00 | Detonator || ANV03 | 14.99 | 2 ton anvil || JP1000 | 35.00 | JetPack 1000 || SAFE | 50.00 | Safe || JP2000 | 55.00 | JetPack 2000 |+---------+------------+----------------+14 rows in set (0.00 sec) 此例是检索产品表中的产品ID，产品价格和产品名，并对输出结果按照产品价格和产品名进行排序（先按价格排序，再按名称排序）。注意，在按照多个列进行排序时，排序完全按照所规定的顺序进行（在本例中如果多个行具有相同的价格则咱其名称进行再排序）。 2.2 指定排序的方向 数据排序不限于升序排序（这是默认的排序顺序），还可以通过在order by子句中指定desc关键字对输出结果进行降序排序。如下例： 12345678910111213141516171819202122select prod_id, prod_price, prod_name #输入from productsorder by prod_price desc;+---------+------------+----------------+ #输出| prod_id | prod_price | prod_name |+---------+------------+----------------+| JP2000 | 55.00 | JetPack 2000 || SAFE | 50.00 | Safe || JP1000 | 35.00 | JetPack 1000 || ANV03 | 14.99 | 2 ton anvil || DTNTR | 13.00 | Detonator || FB | 10.00 | Bird seed || TNT2 | 10.00 | TNT (5 sticks) || ANV02 | 9.99 | 1 ton anvil || OL1 | 8.99 | Oil can || ANV01 | 5.99 | .5 ton anvil || SLING | 4.49 | Sling || FU1 | 3.42 | Fuses || FC | 2.50 | Carrots || TNT1 | 2.50 | TNT (1 stick) |+---------+------------+----------------+14 rows in set (0.00 sec) 注意，desc关键字只应用到直接位于其前面的列名，位于其后的列名仍然按默认的升序。如果想在多个列上进行降序排序，需要对order by后的每个列名指定desc关键字。与desc关键字相反的是asc关键字，但升序是默认的排序方式，所以无需特别指定。 其次，要特别注意各个子句出现的次序（比如order by子句出现在from子句之后，而limit子句出现在order by子句之后），子句次序混乱将会报错。 如何检索一列中最高或者最底的值？ 到目前为止order by以及limit子句可以帮助实现这一检索，have a try!]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql学习笔记（二）——连接服务器]]></title>
    <url>%2F2017%2F11%2F14%2Fmysql-2%2F</url>
    <content type="text"><![CDATA[前一章节介绍了数据库基本概念，在有可使用的服务器和客户机软件之后，连接到数据库是执行后续操作的首要步骤。所有的图形化客户机软件都提供服务器连接窗口，本小白使用的是最原始的Mysql命令行实用程序，后续展现的代码也是基于该客户机工具。 服务器连接要连接到服务器需要知道其四个基本信息：主机名，端口，用户名以及口令。 主机名：也是计算机名，如果连接的是本地Mysql服务器则为localhost。 端口：如果使用默认端口3306之外的端口需要提供其端口号。（在网络上，各主机通过TCP/IP协议进行数据交互，而主机上有多程序同时运行，要将数据准确传输到某个特定的程序就需要引入端口机制将各个程序与特定端口号对应，进而实现针对到程序间的数据交互。） 用户名 用户名口令：就是对应的密码。 在命令提示符下输入: 1mysql -h localhost -u root -p *** -P 3306 #-h后跟主机名 -u后跟用户名 -p后跟口令 -P后跟端口号 输入完成后会出现如下一个简单提示： 12345678910111213Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 3Server version: 5.7.19-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 注意，如果连接本地服务器出现错误，请检查本地Mysql服务是否开启，或许需要手动开启服务。后续命令输入在mysql&gt;之后，命令用；结束，输入quit或exit退出Mysql命令行实用程序。 选择数据库 要知道，在最初连接到Mysql时，没有任何数据库打开供你使用，你需要选择一个数据库进而执行其他数据库操作。如果你不知道可以使用的数据库名，可以使用show关键字来显示数据库信息。下面是一个简单的例子： 123456789101112show databases; #输入+--------------------+ #输出| Database |+--------------------+| information_schema || cda1 || crashcourse || mysql || performance_schema || sys |+--------------------+6 rows in set (0.04 sec) 此处返回一个数据库列表，列表中是Mysql内部可能使用的数据库。下一步选择你想进入的数据库，如下： 12use crashcourse; #输入Database changed #输出 注意，use语句不返回任何结果，依赖于使用的客户机软件，显示某种形式的通知。必须先使用use语句打开数据库才能读取其中的数据。 关于show语句 更多的show语句可以在Mysql命令行实用程序中，执行help show;进行查看，此处列出两个常用show语句： 123456789101112show tables; #输入+-----------------------+ #输出| Tables_in_crashcourse |+-----------------------+| customers || orderitems || orders || productnotes || products || vendors |+-----------------------+6 rows in set (0.00 sec) 注意，show tables;返回正在使用的数据库内的表的列表。 1234567891011show columns from products; #输入+------------+--------------+------+-----+---------+-------+ #输出| Field | Type | Null | Key | Default | Extra |+------------+--------------+------+-----+---------+-------+| prod_id | char(10) | NO | PRI | NULL | || vend_id | int(11) | NO | MUL | NULL | || prod_name | char(255) | NO | | NULL | || prod_price | decimal(8,2) | NO | | NULL | || prod_desc | text | YES | | NULL | |+------------+--------------+------+-----+---------+-------+5 rows in set (0.12 sec) 注意，show columns语句要求指定一个数据库内的表名，此例中使用的是products表，它对每个表中的每个字段返回一行（包含了各行数据类型，允许空值与否，主外键，默认值及额外信息）。show columns还有一种快捷方式，使用describe products会返回如上相同的结果。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql学习笔记（一）——数据库基础概念]]></title>
    <url>%2F2017%2F11%2F13%2Fmysql-1%2F</url>
    <content type="text"><![CDATA[在写这篇文章之前，我只花了一小段时间大致对《Mysql必知必会》这本小册子翻看了一遍。作为新入坑小白的我知道使用数据库是每位数据科学相关工作者的必备技能，在深入学习之前，理解关于它的基本概念及术语对后续的学习会有很大的帮助。 那么，初步接触数据库的第一个问题，十有八九，为什么要学习数据库或者数据有什么用？像这样的问题，作为数学和统计专业出身的我只会微微一笑，当然，数据库毕竟不是单纯的理论。给大家举个例子，假设各位看官开了一家书店，那么如何摆放书籍便于你自己还有前来买书的人搜寻就是一个需要解决的难题。如果说你的书店只卖两本书，那或许考虑怎么摆书是徒劳无功的，但如果你的书店有两万本各不相同书呢？现实情况往往更类似于后者。这样，你就需要将书进行分类以及整理，不同的店家有不同的方法，但需要告诉别人整理摆放的规则使所有的人都能按需检索。现今，有许多企业都拥有非常大规模的数据，虽然它们分别属于不同的行业，但都同样面临管理数据的问题，而数据库技术就能帮助解决这一难题。 要知道其实生活中，我们一直都在使用数据库，比如利用搜索引擎检索、查询自己的银行账户余额等等。数据库技术针对于数据管理，是计算机科学的重要分支。但由于一些原因，不同的人会使用相同的数据库术语表示不同的事物，所以对于本对其就不清楚的小白来说更加混乱。下面，我将列出一些数据库术语并加以说明。 基本术语： 数据库（Database, DB）：数据库是指一种可共享的，以某种有组织的方式存储在计算机内的数据集合。（简单理解，可以将其想象为是保存有组织数据的容器，比如一个文件夹，是存放数据的物理位置。） 数据库管理系统（Database Management System, DBMS）:数据库软件也称为DBMS，通过它我们可以创建和操纵数据库。（通常会看到一些人使用数据库这个术语来代表他们使用的数据库软件，但这是不正确的而且容易引起混淆，因为一般来说我们并不直接访问数据库而是通过DBMS。） SQL（Structrued Query Language）:结构化查询语言，是一种专门用来与数据库通信的语言。（几乎所有DBMS都支持SQL，它不是由某个特定数据库供应商专有的，但也并非所有语句都是可移植于不同DBMS。） 表（table）:某种特定类型数据的结构化清单。（比如，想要将数据放进文件夹，首先需要在其中创建文件，然后将相关的数据放入特定的文件中。可以将数据库中的表想象成这里的文件，表是一种结构化的文件，用来存储某种特定类型的数据，每个表都有一个自己的名字。） 模式（schema）:是关于表和数据库信息的特性和结构的信息。（每个表都有一定的特性，这些特性决定了数据在各个表中如何存储，用于描述表的这组信息以及数据库中各个表之间的关系即为模式。） 列（column）:表中的一个字段。（表由列组成，每一列都存储着一条特定的信息。比如客户信息表中，客户编号、姓名、住址分别记录于各个列中。将数据有效的分解为多个列是有非常必要的，否则在排序和过滤时会非常困难。） 行（row）:表中的一个记录。（例如，客户信息表中每行存储着一个客户。行和记录这两个术语可以互相替代，但从技术层面讲，行才是正确的术语。） 主键（primary key）:一列或一组列，其值可以唯一区分表中的每个行。（例如客户信息表中，可用客户编号列作为主键。若没有主键，更新或删除表中特定行将变得困难，因为没有安全的方法保证只涉及相关的行。） 关于Mysql 前文说到了数据库管理系统，数据的管理、处理实际都是由数据库软件，即DBMS完成的。而Mysql就是DBMS的一种，知名的DBMS还有Oracle,SQL Server,DB2等等。至于为什么选Mysql，见仁见智，首先Mysql是开源的，就好像SAS和R一样（你买得起吗你就学SAS？你的公司买SAS了吗你就学？。。。开源万岁！）。其次，Mysql的使用非常广泛，一些知名企业也使用Mysql来管理自己的数据，它执行快且容易安装和使用。 DBMS可分为两类：一种是共享文件系统的DBMS，一种是基于客户机-服务器的DBMS。前者用于桌面用途，通常不用于高端应用。Mysql即是基于客户机-服务器的DBMS。服务器是负责所有数据访问和处理的一个软件，这个软件运行在称为数据库服务器的计算机上，关于数据添加、删除、更新等请求都由服务器软件来完成。而这些请求来自于运行客户机软件的计算机，它直接和用户交互。比如，你请求检索某数据库中某张表的一个字段，则客户机软件通过网络提交请求给服务器软件，服务器软件处理这个请求并将结果反馈至客户机。（注意：客户机和服务器软件可以安装在不同或同一台计算机上，但要和数据库交互，客户机都要和服务器进行通信。） 服务器软件为Mysql DBMS。可以在本地安装的副本上运行，也可以连接到运行在你具有访问权限的远程服务器上的副本。 客户机软件是Mysql提供的工具，如Workbench等。 本菜鸟目前用的是mysql命令行实用程序以及Workbench。前者没有下拉菜单，用户界面及鼠标支持，但它是Mysql核心安装的一部分，简单实用，只需在操作系统命令提示符下输入简单语句即可进入。至于类似Workbench这类图形交互客户机软件有很多，不同人根据自己习惯喜好不同可自行选择，由于我也只用过Workbench就不瞎推荐了。。。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一首令人窒息的诗歌]]></title>
    <url>%2F2017%2F11%2F07%2Fpoetry%2F</url>
    <content type="text"><![CDATA[短歌行曹操对酒当歌，人生几何！譬如朝露，去日苦多。慨当以慷，忧思难忘。何以解忧？唯有杜康。 青青子衿，悠悠我心。但为君故，沉吟至今。 呦呦鹿鸣，食野之苹。我有嘉宾，鼓瑟吹笙。 明明如月，何时可掇？忧从中来，不可断绝。 越陌度阡，枉用相存。契阔谈讌，心念旧恩。 月明星稀，乌鹊南飞。绕树三匝，何枝可依？ 山不厌高，海不厌深。周公吐哺，天下归心。 《短歌行》是汉乐府的旧题，属于《相和歌辞·平调曲》。这就是说它本来是一个乐曲的名称。最初的古辞已经失传。乐府里收集的同名有24首，最早的是曹操的这首。这种乐曲怎么唱法，现在当然是不知道了。但乐府《相和歌·平调曲》中除了《短歌行》还有《长歌行》，唐代吴兢《乐府古题要解》引证古诗“长歌正激烈”，魏文帝曹丕《燕歌行》“短歌微吟不能长”和晋代傅玄《艳歌行》“咄来长歌续短歌”等句，认为“长歌”、“短歌”是指“歌声有长短”。现在也就只能根据这一点点材料来理解《短歌行》的音乐特点。《短歌行》这个乐曲，原来当然也有相应的歌辞，就是“乐府古辞”，但这古辞已经失传了。现在所能见到的最早的《短歌行》就是曹操所作的拟乐府《短歌行》。所谓“拟乐府”就是运用乐府旧曲来补作新词，曹操传世的《短歌行》共有两首，这里要介绍的是其中的第一首。 这首《短歌行》的主题非常明确，就是作者希望有大量人才来为自己所用。曹操在其政治活动中，为了扩大他在庶族地主中的统治基础，打击反动的世袭豪强势力，曾大力强调“唯才是举”，为此而先后发布了“求贤令”、“举士令”、“求逸才令”等；而《短歌行》实际上就是一曲“求贤歌”、又正因为运用了诗歌的形式，含有丰富的抒情成分，所以就能起到独特的感染作用，有力地宣传了他所坚持的主张，配合了他所颁发的政令。正像曹操的其它诗作如《蒿里行》、《对酒》、《苦寒行》等一样，是政治性很强的诗作，主要是为曹操当时所实行的政治路线和政治策略服务的；然而它那政治内容和意义却完全熔铸在浓郁的抒情意境之中，全诗充分发挥了诗歌创作的特长，准确而巧妙地运用了比兴手法，来达到寓理于情，以情感人的目的。在曹操的时代，他就已经能够按照抒情诗的特殊规律来取得预期的社会效果，这一创作经验显然是值得借鉴的。同时因为曹操在当时强调“唯才是举”有一定的进步意义，所以他对“求贤”这一主题所作的高度艺术化的表现，也应得到历史的肯定。]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>poetry</tag>
      </tags>
  </entry>
</search>
